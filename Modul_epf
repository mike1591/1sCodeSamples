// постоянные константы
Перем ТаблГрупп;
Перем ИнтСоед; // Объект интернет-соединение для модема
Перем СсылкаНаДокументДубликат ;  // Используется при анализе дубликата

Процедура УстановитьДоговорЭквайринга(Док)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыЭквайринга.Ссылка как ДоговорЭквайринга,
		|	ДоговорыЭквайринга.Эквайрер,
		|	ДоговорыЭквайринга.ДоговорВзаиморасчетов как ДоговорВзаиморасчетовЭквайрера 
		|ИЗ
		|	Справочник.ДоговорыЭквайринга КАК ДоговорыЭквайринга
		|ГДЕ
		|	ДоговорыЭквайринга.ДоговорВзаиморасчетов.Организация = &Организация";

	Запрос.УстановитьПараметр("Организация", Док.Организация);

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.следующий() Тогда 
        ЗаполнитьЗначенияСвойств(Док,Выборка);
	КонецЕсли ;
КонецПроцедуры 

Процедура ПересчитатьТорговуюУступку(ДоговорЭквайринга,ОплатыПлатежнымиКартами)
	
	Если Не ДоговорЭквайринга.Пустая() Тогда 
		
		Тарифы = ДоговорЭквайринга.ТарифыЗаРасчетноеОбслуживание.Выгрузить();
		
		Для каждого стрОплата из ОплатыПлатежнымиКартами Цикл 
			ПроцентТорговойУступки = 0 ;
			
			стрТариф = Тарифы.Найти(стрОплата.ВидОплаты,"ВидОплаты") ;
			Если стрТариф <> Неопределено Тогда
				ПроцентТорговойУступки = стрТариф.ПроцентТорговойУступки ;						
				стрОплата.ПроцентТорговойУступки = ПроцентТорговойУступки ;
				стрОплата.СуммаТорговойУступки = стрОплата.Сумма*ПроцентТорговойУступки/100 ;
			КонецЕсли ;	
		КонецЦикла ;
		
	КонецЕсли ;	
КонецПроцедуры 

Функция СправочникНоменклатура(КодПоиска)
	Код = КодПоиска ;
	ДлинаКода = СтрДлина(Код);
	
	Пока ДлинаКода >1 Цикл 
		
		рез  = Справочники.Номенклатура.НайтиПоКоду(Код);
		Если ЗначениеЗаполнено(рез) Тогда 
			Прервать ;
		КонецЕсли ;	
		
		ДлинаКода= ДлинаКода - 1; 
		
		Код = Прав(Код,ДлинаКода);
		
	КонецЦикла ;
	
	Если НЕ ЗначениеЗаполнено(рез) Тогда 
		Сообщить("Не найдена номенклатура по коду "+ КодПоиска,статусСообщения.Важное);	
	КонецЕсли ;	
	
	Если рез.ЭтоГруппа    Тогда 
		Сообщить("Номенклатура по коду "+КодПоиска+" это группа , обнуляем Номенклатуру ",статусСообщения.Важное);	
		рез  = Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли ;	
	
	Возврат  рез;
КонецФункции	
//*найти элемент справочника по реквизиту (Код, Наименование) или другому
Функция СправочникСсылка(Значение,ВидСправочника,ТипПоиска,ИмяРеквизита="",Родитель=Неопределено,Владелец=Неопределено,Предупреждать=Истина) Экспорт
	рез = Неопределено;
	Спр = Справочники[ВидСправочника];
	Если ТипПоиска="Наименование" Тогда
		лНайден = Спр.НайтиПоНаименованию(Значение,Истина);
	ИначеЕсли ТипПоиска="Код" Тогда
		лНайден = Спр.НайтиПоКоду(Значение,Ложь);
	ИначеЕсли ТипПоиска="Реквизит" Тогда
		лНайден = Спр.НайтиПоРеквизиту(ИмяРеквизита,Значение,Родитель,Владелец);
	ИначеЕсли ТипПоиска="Вручную" Тогда
		Если ВидСправочника="Пользователи" Тогда
			лНайден = Спр.НайтиПоКоду(Значение,Ложь);
		КонецЕсли;	
	Конецесли;	
	
	Если лНайден = Спр.ПустаяСсылка()Тогда
		Если Предупреждать Тогда 
			Сообщить("не найден элемент справочника "+ВидСправочника + " по " + ТипПоиска +  " "+ИмяРеквизита+
			" = " + Значение);
		КонецЕсли ;
	Иначе 
		рез = лНайден.Ссылка;
	КонецЕсли;	
	Возврат  рез;
КонецФункции	

Процедура УдалитьОперативныеДокументы(СсылкаНаЗакрывающийДокумент)
	
	Если ССылкаНаЗакрывающийДокумент = Неопределено ТОгда 
		Возврат ;	
	КонецЕсли ;	
	
	Запрос = Новый Запрос ;
	Запрос.УстановитьПараметр("КомментОперативный","%Оперативный%");
	Запрос.УстановитьПараметр("ДатаНеоперативного",СсылкаНаЗакрывающийДокумент.Дата);
	
	Имя = СсылкаНаЗакрывающийДокумент.Метаданные().Имя ;
	Если Имя = "ОтчетОРозничныхПродажах" Тогда 
		Запрос.УстановитьПараметр("КассаККМ",СсылкаНаЗакрывающийДокумент.КассаККМ);
		Запрос.Текст = "ВЫБРАТЬ
		|	ОтчетОРозничныхПродажах.Ссылка
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
		|ГДЕ
		|	ОтчетОРозничныхПродажах.Комментарий ПОДОБНО &КомментОперативный
		|	И ОтчетОРозничныхПродажах.КассаККМ = &КассаККМ
		|	И ОтчетОРозничныхПродажах.Дата <= &ДатаНеоперативного";
	Иначе				   
		Запрос.Текст = "ВЫБРАТЬ
		|	ВозвратТоваровОтПокупателя.Ссылка
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
		|ГДЕ
		|	ВозвратТоваровОтПокупателя.Комментарий ПОДОБНО &КомментОперативный
		|	И ВозвратТоваровОтПокупателя.Дата <= &ДатаНеопреативного
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Комментарий ПОДОБНО &КомментОперативный";
		
		
	КонецЕсли ;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		О = Выборка.ссылка.ПолучитьОбъект() ;
		О.удалить();
	КонецЦикла ;
	
КонецПроцедуры

Функция ЗаписатьДокумент(Док,ОперативныйДокумент=Ложь)
	результат = Ложь ;
	Попытка
		Док.Записать(РежимЗаписиДокумента.Запись);
		Сообщить("Записан документ: " + Док, СтатусСообщения.Информация);
		Результат = Истина ;
	Исключение 
		Сообщить(ОписаниеОшибки());	
	КонецПопытки ;	
	
	Если ОбработкаОперативныхОтчетов Тогда 
		Если Не ОперативныйДокумент Тогда 
			УдалитьОперативныеДокументы(Док.Ссылка);
		КонецЕсли ;	
	Иначе
	КонецЕсли ;
	
	Попытка
		Док.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		Сообщить("*** Проведение документа: " + Док + ?(Док.Проведен, " (проведен)", " (непроведен)"), СтатусСообщения.Информация);
		Результат = Истина ;
	Исключение 
		Сообщить(ОписаниеОшибки());	
	КонецПопытки ;	
	
КонецФункции

////////////////////////////////////////////////////////////////\\
//
// Установка НДС и счетов учета 
Процедура ПересчетТабличнойЧастиТовары(Док)
	Попытка
		Для каждого  СтрокаТЧ из Док.Товары Цикл 
			Док.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, "Товары", Док.ОтражатьВБухгалтерскомУчете, Док.ОтражатьВНалоговомУчете) ;
		конецЦикла;
	Исключение
		
	КонецПопытки ;
	
	Попытка
		Для каждого  СтрокаТЧ из Док.Товары Цикл 
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, Док);
		конецЦикла;
	Исключение
		
	КонецПопытки ;
	
КонецПроцедуры 

Функция НалогообложениеНДС(Организация,Дата)
	Запрос = Новый Запрос ;
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("КонПериода",Дата);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ОрганизацияНеЯвляетсяПлательщикомНДС
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&КонПериода, Организация = &Организация) КАК УчетнаяПолитикаНалоговыйУчетСрезПоследних";
	
	Ответ = Ложь ;
	
	Попытка 
		рез = запрос.Выполнить() ;
		
		Если Не рез.Пустой() Тогда 
			Выборка = рез.Выбрать(); 
			Выборка.Следующий();
			Ответ = Не Выборка.ОрганизацияНеЯвляетсяПлательщикомНДС ;
		КонецЕсли ;
	Исключение 
		
	КонецПопытки ;
	
	Возврат Ответ ; 
	
КонецФункции

Процедура СкорректироватьСоставКолонокТаблицыЗначений(тз,ИмяКолонки)
	
	Если тз.Колонки.Найти(ИмяКолонки) = Неопределено Тогда 
		тз.Колонки.Добавить(ИмяКолонки);
	КонецЕсли ;	
	
КонецПроцедуры 	

Функция БезналичныеОплаты(тзДанные)
	
	тзОплаты = Новый Структура("ОплатаПлатежнымиКартами,ОплатаБанковскимиКредитами") ;
	тзОплаты.ОплатаПлатежнымиКартами = Документы.ОтчетОРозничныхПродажах.ПустаяСсылка().ОплатаПлатежнымиКартами.Выгрузить();
	тзОплаты.ОплатаБанковскимиКредитами = Документы.ОтчетОРозничныхПродажах.ПустаяСсылка().ОплатаБанковскимиКредитами.Выгрузить();
	
	// Добавляем колонку если они не найдены в таблице  	
	тзДанные1 = тзДанные.Скопировать();
	
	СкорректироватьСоставКолонокТаблицыЗначений(тзДанные,"НомерЧека"); 
	
	СкорректироватьСоставКолонокТаблицыЗначений(тзОплаты.ОплатаПлатежнымиКартами,"НомерКарты"); 
	СкорректироватьСоставКолонокТаблицыЗначений(тзОплаты.ОплатаБанковскимиКредитами,"НомерКарты"); 
	СкорректироватьСоставКолонокТаблицыЗначений(тзОплаты.ОплатаПлатежнымиКартами,"НомерЧека"); 
	СкорректироватьСоставКолонокТаблицыЗначений(тзОплаты.ОплатаБанковскимиКредитами,"НомерЧека"); 
	
	тзВх = тзДанные.Скопировать(,"КодОплаты,Сумма,НомерКартыБН,НомерЧека");
	тзВх.Свернуть("КодОплаты,НомерКартыБН,НомерЧека","Сумма");
	
	м = тзВх.НайтиСтроки(НОвый Структура("КодОплаты",-1));
	Для каждого стр из М цикл
		тзВх.Удалить(стр);	
	КонецЦикла ;	
	
	нс = 0 ;
	Для каждого стр из тзВх цикл
		Если пустаяСтрока(стр.НомерКартыБН) Тогда 
			нс = нс + 1 ;
			стр.НомерКартыБН = Строка(нс);	
		КонецЕсли ;	
	КонецЦикла ;	
	
	//	тзОплаты.Колонки.Добавить("ВидОплаты");
	Для каждого стр1 из тзВх цикл
		стрВидОплаты = ВидыОплат.Найти(стр1.КодОплаты,"КодОплаты");	
		
		Если стрВидОплаты <> Неопределено  Тогда 
			ВидОплаты = стрВидОплаты.ВидОплаты   ;
			Если ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта Тогда 
				
				стр = тзОплаты.ОплатаПлатежнымиКартами.Добавить();
				стр.ВидОплаты = ВидОплаты ;
				стр.Сумма = стр1.Сумма ;
				Стр.НомерКарты = стр1.НомерКартыБН ;
				Стр.НомерЧека = стр1.НомерЧека ;
				
			ИначеЕсли ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.БанковскийКредит Тогда
				стр = тзОплаты.ОплатаБанковскимиКредитами.Добавить();
				стр.ВидОплаты = ВидОплаты ;
				стр.БанкКредитор = ВидОплаты.БанкКредитор;
				стр.ДоговорВзаиморасчетовБанкаКредитора = ВидОплаты.ДоговорВзаиморасчетовБанкаКредитора ;
				стр.ПроцентБанковскойКомиссии = ВидОплаты.ПроцентБанковскойКомиссии ;
				стр.Сумма = стр1.Сумма ;
				Стр.СуммаБанковскойКомиссии = стр1.Сумма*стр.ПроцентБанковскойКомиссии/100 ;
			КонецЕсли ;	
		Иначе
			ТекстИнформации = "Не найден вид оплаты чека ККМ по коду :   " +Строка(стр1.КодОПлаты) ;   
			ЗаписьЖурналаРегистрации(ТекстИнформации,,,,"не  нашли вид опалаты в таблице ВидыОплат  ");
			Сообщить(ТекстИнформации,статусСообщения.ОченьВажное);
		КонецЕсли ;	
	КонецЦикла ;	
	
	Возврат тзОплаты ;
КонецФункции 

////////////////////////////////////////////////////////////////\\
Функция ДокументПродажаРозница(Данные,Комментарий,ОперативныйДокумент)
	Товары = Данные.Товары;
	Док = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
	
	ЗаполнитьЗначенияСвойств(Док,Данные);
	Док.Организация					= Данные.КассаККМ.Владелец;
	Док.Ответственный 				= ПараметрыСеанса.ТекущийПользователь;
	
	Док.ВидОперации 				= Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах;
	Док.УсловиеПродаж 				= Справочники.УсловияПродаж.ПустаяСсылка() ;
	
	Док.ОтражатьВУправленческомУчете	= Истина;
	Док.ОтражатьВБухгалтерскомУчете		= Док.Организация.ОтражатьВРегламентированномУчете;
	Док.ОтражатьВНалоговомУчете			= Док.Организация.ОтражатьВРегламентированномУчете;
	
	Док.СуммаВключаетНДС				= Истина;
	Док.УчитыватьНДС					= НалогообложениеНДС(Док.Организация,Док.Дата);
	
	Док.Комментарий = Комментарий;
	Если ОперативныйДокумент Тогда 
		Док.Комментарий = "Оперативный " + Док.Комментарий ; 	
	КонецЕсли ;	
	
	Док.СуммаДокумента = Товары.Итог("Сумма") ;
	Док.Товары.Загрузить(Товары);
	Док.ПродажиПоДисконтнымКартам.Загрузить(Данные.ПродажиПоДисконтнымКартам);
	УстановитьДоговорЭквайринга(Док) ;
	ПересчитатьТорговуюУступку(Док.ДоговорЭквайринга,Данные.ОплатаПлатежнымиКартами);
	
	Док.ОплатаПлатежнымиКартами.Загрузить(Данные.ОплатаПлатежнымиКартами);
	Док.ОплатаБанковскимиКредитами.Загрузить(Данные.ОплатаБанковскимиКредитами);
	
	ПересчетТабличнойЧастиТовары(Док);	
	
	
	ЗаписатьДокумент(Док,ОперативныйДокумент);
	
	Возврат Док;
КонецФункции

Функция ДокументПТУ(Данные,Комментарий)
	Товары = Данные.Товары;
	Док = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(Док,Данные) ;
	
	Док.Ответственный 				= ПараметрыСеанса.ТекущийПользователь;
	Док.Организация					= Данные.КассаККМ.Владелец;
	Док.ВалютаДокумента             = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Док.СкладОрдер						= Данные.Склад; 
	
	Док.ВидПоступления  				= Перечисления.ВидыПоступленияТоваров.НаСклад;
	
	Док.ОтражатьВУправленческомУчете	= Истина;
	Док.ОтражатьВБухгалтерскомУчете		= Док.Организация.ОтражатьВРегламентированномУчете;
	Док.ОтражатьВНалоговомУчете			= Док.Организация.ОтражатьВРегламентированномУчете;
	
	Док.СуммаВключаетНДС				= Истина;
	Док.УчитыватьНДС					= НалогообложениеНДС(Док.Организация,Док.Дата);
	Док.Комментарий = Комментарий;
	Док.УстановитьНовыйНомер("");
	
	Док.СуммаДокумента = Товары.Итог("Сумма") ;
	Док.Товары.Загрузить(Товары);
	
	Док.Записать(РежимЗаписиДокумента.Запись);
	
	Возврат Док;
КонецФункции

////////////////////////////////////////////////////////////////\\
Функция ДокументИнвентаризация(Данные,Комментарий)
	Товары = Данные.Товары;
	ЕстьККМ = Ложь ;	
	Док = Документы.ИнвентаризацияТоваровНаСкладе.СоздатьДокумент();
	
	Попытка 
		Док.Организация					= Данные.КассаККМ.Владелец;
		ЕстьККМ = Истина ;	
	Исключение 
	КонецПопытки ;
	
	Если Не ЕстьККМ Тогда 	
		
		Попытка 
			строки = ККМСКлад.НайтиСтроки(Новый Структура("Склад",Данные.Склад));
			Для каждого стр из строки Цикл
				Если Не Стр.Организация.пустая() Тогда 
					Док.Организация = Стр.Организация;
					Прервать ;		
				КонецЕсли ;				
			КонецЦикла ;	
			
		Исключение 
			
		КонецПопытки ;
		
	КонецЕсли ;
	
	Док.Ответственный 				= ПараметрыСеанса.ТекущийПользователь;
	Док.Дата 						= Данные.Дата;
	Док.Склад						= Данные.Склад; 
	
	Док.Комментарий = Комментарий;
	Док.УстановитьНовыйНомер("");
	Док.Товары.Загрузить(Товары);
	
	результат = Ложь ;
	Попытка
		Док.Записать(РежимЗаписиДокумента.Запись);
		Сообщить("*** создан документ: " + Док + ?(Док.Проведен, " (проведен)", " (непроведен)"), СтатусСообщения.Информация);
		Результат = Истина ;
	Исключение 
		Сообщить(ОписаниеОшибки());	
	КонецПопытки ;	
	
	Возврат Док;
КонецФункции

Функция ДокументВнутреннийЗаказ(Данные,Комментарий)
	Товары = Данные.Товары;
	Док = Документы.ВнутреннийЗаказ.СоздатьДокумент();
	Док.Организация					= Данные.Организация;
	Док.Ответственный 				= ПараметрыСеанса.ТекущийПользователь;
	Док.Дата 						= Данные.Дата;
	Док.Заказчик					= Данные.Склад; 
	Док.ВидЗаказа 					= Перечисления.ВидыВнутреннегоЗаказа.НаСклад; 
	
	Док.Комментарий = Комментарий;
	Док.УстановитьНовыйНомер("");
	Док.Товары.Загрузить(Товары);
	
	результат = Ложь ;
	Попытка
		Док.Записать(РежимЗаписиДокумента.Запись);
		Сообщить("*** создан документ: " + Док + ?(Док.Проведен, " (проведен)", " (непроведен)"), СтатусСообщения.Информация);
		Результат = Истина ;
	Исключение 
		Сообщить(ОписаниеОшибки());	
	КонецПопытки ;	
	
	Возврат Док;
КонецФункции
////////////////////////////////////////////////////////////////\\
Функция ДокументПродажаОпт(Данные,Комментарий,ОперативныйДокумент)
	Товары = Данные.Товары;
	//	Товары.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговле,"СчетУчетаБУ");
	//	Товары.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.ВыручкаНеОблагаемаяЕНВД,"СчетДоходовБУ");
	//	Товары.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.РасходыНаПродажу,"СчетРасходовБУ");
	Услуги = Данные.Услуги;
	
	Подразделение = Данные.Подразделение;  // Из за того что при заказах подразделение не совпадает со складом 
	Док = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	Док.Организация					= Данные.КассаККМ.Владелец;
	Док.Контрагент  				= Данные.Контрагент;
	Док.ДоговорКонтрагента 			= Док.Контрагент.ОсновнойДоговорКонтрагента;
	Док.ВалютаДокумента 			= Константы.ВалютаРегламентированногоУчета.Получить();
	Док.КурсВзаиморасчетов          = 1 ;
	Док.КратностьВзаиморасчетов     = 1 ;
	
	Док.Ответственный 				= ПараметрыСеанса.ТекущийПользователь;
	Док.Дата = Данные.Дата;
	Док.ВидОперации						= Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
	Док.Склад							= Данные.Склад; 
	Док.Подразделение					= Подразделение; 
	Док.ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада ;
	Док.УсловиеПродаж = Справочники.УсловияПродаж.ПустаяСсылка() ;
	Док.ОтражатьВУправленческомУчете	= Истина;
	Док.ОтражатьВБухгалтерскомУчете		= Док.Организация.ОтражатьВРегламентированномУчете;
	Док.ОтражатьВНалоговомУчете			= Док.Организация.ОтражатьВРегламентированномУчете;
	//	Док.ТипЦен							= Данные.Склад.ТипЦенРозничнойТорговли;
	Док.СуммаВключаетНДС				= Истина;
	Док.УчитыватьНДС					= НалогообложениеНДС(Док.Организация,Док.Дата);
	
	Док.Комментарий = Комментарий;
	Если ОперативныйДокумент Тогда 
		Док.Комментарий = "Оперативный " + Док.Комментарий ; 	
	КонецЕсли ;	
	
	//	Док.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями ;
	Док.СуммаДокумента = Товары.Итог("Сумма") ;
	Док.Товары.Загрузить(Товары);
	Док.Услуги.Загрузить(Услуги);
	ПересчетТабличнойЧастиТовары(Док);	
	
	ЗаписатьДокумент(Док,ОперативныйДокумент);
	
	Возврат Док;
КонецФункции
////////////////////////////////////////////////////////////////\\
Функция ДокументВозвратОпт(Данные,Комментарий,ОперативныйДокумент)
	Товары = Данные.Товары;
	
	Подразделение = Данные.Подразделение;  // Из за того что при заказах паодразделение не совпадает со складом 
	Док = Документы.ВозвратТоваровОтПокупателя.СоздатьДокумент();
	Док.Организация					= Данные.КссаККМ.Организация;
	Док.Ответственный 				= ПараметрыСеанса.ТекущийПользователь;
	Док.Дата 		  = Данные.Дата + 1 ; // чтобы возврат был всегжа позже продажи 
	Док.СкладОрдер 	  = Данные.СКлад;	
	Док.Подразделение = Подразделение; 
	Док.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	Док.КурсВзаиморасчетов = 1 ;
	Док.КратностьВзаиморасчетов = 1 ;
	Док.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
	Док.ОтражатьВУправленческомУчете	= Истина;
	Док.ОтражатьВБухгалтерскомУчете		= Док.Организация.ОтражатьВРегламентированномУчете;
	Док.ОтражатьВНалоговомУчете			= Док.Организация.ОтражатьВРегламентированномУчете;
	
	Док.ТипЦен							= Данные.Склад.ТипЦенРозничнойТорговли;
	Док.СуммаВключаетНДС				= Истина;
	Док.УчитыватьНДС					= НалогообложениеНДС(Док.Организация,Док.Дата);
	
	Док.Комментарий = Комментарий;
	Если ОперативныйДокумент Тогда 
		Док.Комментарий = "Оперативный " + Док.Комментарий ; 	
	КонецЕсли ;	
	
	Док.Контрагент = Данные.Контрагент;
	
	Если Данные.Контрагент <> Неопределено Тогда
		Док.ДоговорКонтрагента = Данные.Контрагент.ОсновнойДоговорКонтрагента;
	КонецЕсли;
	//	УстановитьНомерДокумента(Док);
	Док.УстановитьНовыйНомер("");
	Док.СуммаДокумента = Товары.Итог("Сумма") ;
	Док.Товары.Загрузить(Товары);
	
	ПОпытка 
		//		Док.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями ;
	Исключение
		
	КонецПопытки ;
	
	ПересчетТабличнойЧастиТовары(Док);	
	
	ЗаписатьДокумент(Док,ОперативныйДокумент);
	
	Возврат Док;
КонецФункции
///////////////////////////////////////////////////////
Процедура ЗаполнитьКлиентаПоЧеку(тзДанные,НомерККМ,НомерЧека,ДопИнфо)
	ДИ = СокрЛП(ДопИнфо);
	Если  Лев(ДИ,3) = "999" Тогда 
		Отбор = Новый Структура("НомерККМ,НомерЧека",НомерККМ,НомерЧека) ;
		Выбор =  тзДанные.НайтиСтроки(Отбор) ;
		Для каждого стр из Выбор Цикл 
			стр.КодКлиента =  ДИ ; 
		КонецЦикла ;
	КонецЕсли ;	
КонецПроцедуры
// распределений суммовой скидки по чеку 
Функция РаспределитьСкидкуПоЧеку(тзДанные,НомерККМ,НомерЧека,СуммаСкидки); 
	Отбор = Новый Структура("НомерККМ,НомерЧека",НомерККМ,НомерЧека) ;
	тз  = тзДанные.Скопировать(Отбор);
	
	СуммаЧекаДоСкидки  = тз.Итог("Сумма");
	
	// т к  сумма скидки противополжна по знаку сумме чека 
	ДоляСкидки = - СуммаСкидки/СуммаЧекаДоСкидки ; 
	кс = тз.Количество(); // количество  Строк
	
	СкидкаНакоплена = 0 ;
	строки = тзДанные.НайтиСтроки(Отбор) ;
	
	// иеняем строки чека  
	Для н = 0 по кс-2  цикл  
		СуммаСкидкиПоСтроке = Окр(строки[н].Сумма*ДоляСкидки,2); 
		СкидкаНакоплена = СкидкаНакоплена - СуммаСкидкиПоСтроке ;
		строки[н].Сумма = строки[н].Сумма - СуммаСкидкиПоСтроке ;
		
	КонецЦикла ;	
	
	// последняя строка 
	ОстатокСкидки  = -(СуммаСкидки  - СкидкаНакоплена) ;
	строки[кс-1].Сумма = строки[кс-1].Сумма - ОстатокСкидки ;
	
	Возврат СуммаЧекаДоСкидки - СуммаСкидки ;
	
КонецФункции 

Процедура ОбработатьДопИнфо(тзДанные,НомерККМ,НомерЧека,КодДопИнфо)
	
	Если ПродавецВОтчете Тогда 				
		КодПродавца = Прав(КодДопИнфо,12);	
		Отбор = Новый Структура("НомерККМ,НомерЧека",НомерККМ,НомерЧека) ;
		строки = тзДанные.НайтиСтроки(Отбор) ;
		
		Для каждого стр из  строки Цикл 
			стр.КодПродавца = КодПродавца ;
			
		КонецЦикла ;	
		
	КонецЕсли ;	
	
КонецПроцедуры

ПРоцедура ЗаполнитьКоличествоЧеков(тзДанные)
	врем = тзДанные.Скопировать();
	Врем.ЗаполнитьЗначения (0,"КоличествоЧеков");
	врем.Свернуть("НомерККМ,НомерОтчёта,НомерЧека","КоличествоЧеков");
	Врем.ЗаполнитьЗначения (1,"КоличествоЧеков");
	врем.Свернуть("НомерККМ,НомерОтчёта","КоличествоЧеков");
	Отбор = Новый Структура ("НомерККМ,НомерОтчёта");
	Для каждого стр из Врем Цикл 
		ЗаполнитьЗначенияСвойств(Отбор,стр);
		строки = тзДанные.НайтиСтроки(Отбор);		
		Для каждого стр2 из Строки Цикл 
			стр2.КоличествоЧеков = Стр.КоличествоЧеков ;
		КонецЦикла ;	
	КонецЦикла ;	
	
КонецПроцедуры 

Процедура УдалитьКлиентаБонуснойОплатыВЧеке(тзДанные,ДанныеПоОплатеБонусами)
	Отбор = Новый Структура("НомерККМ,НомерОтчёта,НомерЧека,КодКлиента");  
	ЗаполнитьЗначенияСвойств(Отбор,ДанныеПоОплатеБонусами);
	Строки = тзДанные.НайтиСтроки(Отбор);
	Для каждого стр из Строки Цикл 
		стр.КодКлиента = "" ;	
	КонецЦикла ;	
	
КонецПроцедуры 	

////////////////////////////////////////////////////////////////\\
// Заполняем инф по клиентам 
Функция тзКопияЖурнала(База,тзКредиты,ОплатаБонусами)
	
	ОплатаБонусами = Новый	ТаблицаЗначений ;
	ОплатаБонусами.Колонки.Добавить("НомерККМ"); 
	ОплатаБонусами.Колонки.Добавить("НомерОтчёта"); 
	ОплатаБонусами.Колонки.Добавить("НомерЧека"); 
	ОплатаБонусами.Колонки.Добавить("КодКлиента");	
	ОплатаБонусами.Колонки.Добавить("СуммаЧека");	
	ОплатаБонусами.Колонки.Добавить("Сумма");	//Оплата 
	
	тзКредиты = Новый ТаблицаЗначений;
	тзКредиты.Колонки.Добавить("НомерККМ"); 
	тзКредиты.Колонки.Добавить("НомерОтчёта"); 
	тзКредиты.Колонки.Добавить("КодКлиента"); 
	тзКредиты.Колонки.Добавить("Кредит"); 
	тзКредиты.Колонки.Добавить("Аванс"); 
	
	тзДанные = Новый ТаблицаЗначений;
	тзДанные.Колонки.Добавить("НомерККМ"); 
	тзДанные.Колонки.Добавить("НомерОтчёта"); 
	тзДанные.Колонки.Добавить("НомерЧека"); 
	тзДанные.Колонки.Добавить("ДатаВремя"); 
	тзДанные.Колонки.Добавить("Код"); 
	тзДанные.Колонки.Добавить("Цена"); 
	тзДанные.Колонки.Добавить("Количество"); 
	тзДанные.Колонки.Добавить("Сумма"); 
	тзДанные.Колонки.Добавить("КодКлиента"); 
	тзДанные.Колонки.Добавить("Отдел"); 
	тзДанные.Колонки.Добавить("КодОплаты"); 
	тзДанные.Колонки.Добавить("НомерКартыБН"); 
	
	Если ПродавецВОтчете Тогда 
		тзДанные.Колонки.Добавить("КодПродавца"); 
	КонецЕсли ;
	
	тестНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
	ДлинаКодаНоменклатуры = ТестНоменклатура.Метаданные().ДлинаКода;
	
	НомерКартыБН = 0 ;
	
	Пока Не База.ВКонце() цикл
		КодВход =  СокрЛП(База.Code);
		Опер  = СокрЛП(База.Oper);
		НомерККМ = СокрЛП(База.KASSA);
		НомерЧека = База.CHECKNUM ;  	
		НаимТовара = ВРЕГ(СокрЛП(База.Name)) ;
		Если КодВход <> "" Тогда 
			Если КодВход<> "?" ТОгда
				Если Лев(КодВход,1) = "?" ТОгда 
					Если Опер = "?1" Тогда // Доп Инфо - продавец  Но 1 - это номер Доп Инфо, помни об этом !!
						ОбработатьДопИнфо(тзДанные,НомерККМ,НомерЧека,КодВход); 
					КонецЕсли ;
				Иначе
					// Обычная продажа 
					стр = тзДанные.Добавить();
					стр.Код 			= Прав(КодВход,ДлинаКодаНоменклатуры); 
					стр.НомерККМ 		= НомерККМ; 
					стр.НомерОтчёта 	= База.ZNUM; 
					стр.Цена 			= База.Price; 
					стр.Сумма 			= База.SumD+База.SKID; 
					стр.Количество 		= База.kol; 
					стр.КодКлиента 		= База.Client; 
					стр.НомерЧека 		= База.CHECKNUM; 
					стр.Отдел	  		= База.Section; 
					стр.КодОплаты 		= -1; 
					стр.ДатаВремя       = База.TIMEO ;
				КонецЕсли ;
				
			КонецЕсли;
		Иначе
			Если Опер = "$n" Тогда 
				//  пытаемся заполнить  данные по клиенту  который прошел по отложенному чеку
				// инф в Доп инфо 
				ЗаполнитьКлиентаПоЧеку(тзДанные,НомерККМ,НомерЧека,База.DopInfo) ;
			ИначеЕсли  Найти(Опер,"s") >0 Тогда // суммовя скидка по чеку 
				// Сумма чека с учетом всех скидок в том числе бонусная оплата 
				СуммаЧека = РаспределитьСкидкуПоЧеку(тзДанные,НомерККМ,НомерЧека,База.SumD); 
			ИначеЕсли (Опер = "$c")ИЛИ
				(Опер = "$t") ИЛИ
				(Опер = "$k")  Тогда // Оплата по видам оплаты
				НомерКартыБН = НомерКартыБН+1 ;
				стр = тзДанные.Добавить();
				стр.НомерККМ 		= НомерККМ; 
				стр.НомерОтчёта 	= База.ZNUM; 
				стр.Сумма 			= База.PRICE; 
				стр.КодКлиента 		= ""; 
				стр.КодОплаты 		= База.PAYCARD; 
				стр.Цена 			= 0; 
				стр.Количество      = 0; 
				стр.Отдел           = 1; 
				стр.Код             = "";
				стр.НомерКартыБН 	= ?(ПустаяСтрока(База.DopInfo),Строка(НомерКартыБН),База.DopInfo); 
				стр.НомерЧека 		= База.CHECKNUM; 
				
				Если Опер = "$k" Тогда // Оплата по видам оплаты
					Если НаимТовара	= "КРЕДИТ"  Тогда 
						стрк = тзКредиты.Добавить();
						стрк.НомерККМ 		= НомерККМ; 
						стрк.НомерОтчёта 	= База.ZNUM; 
						стрк.КодКлиента 	= База.Client; 
						стрк.Кредит 		= База.Price; 
						стрк.Аванс 			= 0; 
					КонецЕсли ;
				КонецЕсли ;
				
			ИначеЕсли Опер = "$b" Тогда // Бонусная оплата 
				
				стрБ = ОплатаБонусами.Добавить();								
				
				стрБ.НомерККМ  	 = НомерККМ; 
				стрБ.НомерОтчёта = База.ZNUM ; 
				стрБ.КодКлиента    = База.Client; 
				стрБ.СуммаЧека   = СуммаЧека;	
				стрБ.Сумма = База.PRICE;	
				стрБ.НомерЧека   = База.CHECKNUM; 
				Если Не НачислениеБонусовНаНеБонуснуюОплату Тогда 
					УдалитьКлиентаБонуснойОплатыВЧеке(тзДанные,стрБ);	
				КонецЕсли ;	
				
			ИначеЕсли Опер = "#" Тогда // пополнение кредита 
				Если НаимТовара	= "АВАНС"  Тогда 
					стрк = тзКредиты.Добавить();
					стрк.НомерККМ 		= НомерККМ; 
					стрк.НомерОтчёта 	= База.ZNUM; 
					стрк.КодКлиента 	= База.Client; 
					стрк.Кредит 		= 0; 
					стрк.Аванс 			= База.Price; 
				КонецЕсли ;	
			КонецЕсли ;
		КонецЕсли;
		База.Следующая();
	КонецЦикла;
	База.ЗакрытьФайл();
	
	// все таки свернул оплаты бонусами
	ОплатаБонусами.Свернуть("НомерККМ,НомерОтчёта,КодКлиента","Сумма");
	ОплатаБонусами.Колонки.Добавить("ДисконтнаяКарта");
	ОплатаБонусами.Колонки.Добавить("Контрагент");
	ОплатаБонусами.Колонки.Добавить("КассаККМ");
	
	Для каждого стр из ОплатаБонусами Цикл
		стр.КассаККМ = НайтиККМ(стр.НомерККМ) ;
	КонецЦикла ;	
	
	
	ЗаписьЖурналаРегистрации("ПриемОтчетовККМ.ФормированиеДокумента",УровеньЖурналаРегистрации.Информация,,,"Сумма = " + тзДанные.Итог("Сумма"));
	
	
	тзДанные.Колонки.Добавить("КоличествоЧеков");
	ЗаполнитьКоличествоЧеков(тзДанные);
	
	//	тзДанные.Колонки.Удалить("НомерЧека");
	
	КолонкиСвертки = "НомерККМ,НомерОтчёта,КодКлиента,Код,Цена,Отдел,КоличествоЧеков,КодОплаты,НомерКартыБН" ;
	
	Если ВключатьИнфЧекВОтчет Тогда 
		КолонкиСвертки = КолонкиСвертки + ",НомерЧека,ДатаВремя";
	КонецЕсли ;	
	
	Если ПродавецВОтчете Тогда 
		КолонкиСвертки = КолонкиСвертки + ",КодПродавца";
	КонецЕсли ;	
	
	тзДанные.Свернуть(КолонкиСвертки,"Количество,Сумма");
	
	тзКредиты.Свернуть("НомерККМ,НомерОтчёта,КодКлиента","Кредит,Аванс");
	
	Отбор = Новый Структура("Количество,Сумма",0,0) ;
	Выбор =  тзДанные.НайтиСтроки(Отбор) ;
	
	Для каждого стр из Выбор Цикл 
		тзДанные.Удалить(стр); 
	КонецЦикла ;
	
	Возврат тзДанные;
КонецФункции
////////////////////////////////////////////////////////////////\\
// Заполняем инф по клиентам 
Функция тзКопияЖурналаИнв(База)
	
	тзДанные = Новый ТаблицаЗначений;
	тзДанные.Колонки.Добавить("Код"); 
	тзДанные.Колонки.Добавить("Цена"); 
	тзДанные.Колонки.Добавить("Количество"); 
	тзДанные.Колонки.Добавить("Сумма"); 
	тзДанные.Колонки.Добавить("НомерККМ"); 
	тзДанные.Колонки.Добавить("НомерОтчёта"); 
	тзДанные.Колонки.Добавить("Отдел"); 
	тестНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
	ДлинаКодаНоменклатуры = ТестНоменклатура.Метаданные().ДлинаКода;
	Пока Не База.ВКонце() цикл
		Код = Прав(База.Code,ДлинаКодаНоменклатуры);
		Код = СокрЛП(Код);
		стр = тзДанные.Добавить();
		стр.Код 			= Код; 
		стр.Цена 			= База.Price; 
		стр.Сумма 			= База.SumD; 
		стр.Количество 		= База.skidproc; 
		стр.НомерККМ 		= СокрЛП(База.KASSA); 
		стр.НомерОтчёта 	= База.ZNUM; 
		стр.Отдел 	= База.SECTION; 
		База.Следующая();
	КонецЦикла;
	ЗаписьЖурналаРегистрации("Сумма = " + тзДанные.Итог("Сумма"),,,,"Сумма по отчету ");
	тзДанные.Свернуть("НомерККМ,НомерОтчёта,Код,Цена,Отдел","Количество,Сумма");
	Отбор = Новый Структура("Количество,Сумма",0,0) ;
	Выбор =  тзДанные.НайтиСтроки(Отбор) ;
	Для каждого стр из Выбор Цикл 
		тзДанные.Удалить(стр); 
	КонецЦикла ;
	Возврат тзДанные;
КонецФункции

Функция тзКопияЖурналаИнвСервер(База)
	
	тзДанные = Новый ТаблицаЗначений;
	тзДанные.Колонки.Добавить("Код"); 
	тзДанные.Колонки.Добавить("Цена"); 
	тзДанные.Колонки.Добавить("Количество"); 
	тзДанные.Колонки.Добавить("Сумма"); 
	тестНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
	ДлинаКодаНоменклатуры = ТестНоменклатура.Метаданные().ДлинаКода;
	Пока Не База.ВКонце() цикл
		Код = Прав(База.Code,ДлинаКодаНоменклатуры);
		Код = СокрЛП(Код);
		стр = тзДанные.Добавить();
		стр.Код 			= Код; 
		стр.Цена 			= База.Price; 
		стр.Количество 		= База.FactOst; 
		стр.Сумма 			= стр.Цена*стр.Количество; 
		База.Следующая();
	КонецЦикла;
	ЗаписьЖурналаРегистрации("Сумма = " + тзДанные.Итог("Сумма"),,,,"Сумма по инвентаризации сервер  ");
	тзДанные.Свернуть("Код,Цена","Количество,Сумма");
	Отбор = Новый Структура("Количество,Сумма",0,0) ;
	Выбор =  тзДанные.НайтиСтроки(Отбор) ;
	Для каждого стр из Выбор Цикл 
		тзДанные.Удалить(стр); 
	КонецЦикла ;
	Возврат тзДанные;
КонецФункции

Функция тзКопияЖурналаВнутреннийЗаказПТУ(База)
	тзДанные = Новый ТаблицаЗначений;
	тзДанные.Колонки.Добавить("Код"); 
	тзДанные.Колонки.Добавить("Цена"); 
	тзДанные.Колонки.Добавить("Количество"); 
	тзДанные.Колонки.Добавить("Сумма"); 
	тзДанные.Колонки.Добавить("НомерККМ"); 
	тзДанные.Колонки.Добавить("НомерОтчёта"); 
	тзДанные.Колонки.Добавить("Отдел"); 
	
	тестНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
	ДлинаКодаНоменклатуры = ТестНоменклатура.Метаданные().ДлинаКода;
	
	Пока Не База.ВКонце() цикл
		
		Код = Прав(База.Code,ДлинаКодаНоменклатуры);
		Код = СокрЛП(Код);
		стр = тзДанные.Добавить();
		
		стр.Код 			= Код; 
		стр.Цена 			= База.Price; 
		стр.Сумма 			= База.SumD; 
		стр.Количество 		= База.kol; 
		стр.НомерККМ 		= СокрЛП(База.KASSA); 
		стр.НомерОтчёта 	= База.ZNUM; 
		стр.Отдел 	= База.SECTION; 
		База.Следующая();
		
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации("Сумма = " + тзДанные.Итог("Сумма"),,,,"Сумма по отчету ");
	тзДанные.Свернуть("НомерККМ,НомерОтчёта,Код,Цена,Отдел","Количество,Сумма");
	
	Отбор = Новый Структура("Количество,Сумма",0,0) ;
	Выбор =  тзДанные.НайтиСтроки(Отбор) ;
	Для каждого стр из Выбор Цикл 
		тзДанные.Удалить(стр); 
	КонецЦикла ;
	
	Возврат тзДанные;
КонецФункции

//////////////////////////////////////////////////////////
Функция ЗаполнитьДанныеДокументов(ТзДокВх,тзДанныеОтчетов)
	
	колонок = тзДокВх.Колонки.Количество();
	тзДокВых = тЗДокВх.СкопироватьКолонки(); // выходная копия 
	
	Для каждого стрВх из тзДокВх Цикл 
		
		
		Отбор = НОвый Структура ("НомерККМ,НомерОтчёта,ПродажаОпт",
		стрВх.НомерККМ,
		стрВх.НомерОтчёта,
		стрВх.ПродажаОпт);
		
		тзВрем = тзДанныеОтчетов.Скопировать(тзДанныеОтчетов.НайтиСтроки(Отбор));	
		тзВрем.Свернуть("КодКлиента,Код,Цена,Склад,КодОплаты,НомерКартыБН","Количество,Сумма");
		
		тзПокуп = тзВрем.Скопировать(,"КодКлиента,Сумма");
		тзПокуп.Свернуть("КодКлиента","Сумма");
		
		БезналичныеОплаты =  БезналичныеОплаты(тзВрем) ;
		
		СтрокиДляУдаления = тзВрем.НайтиСтроки(Новый Структура("Код",""));
		
		Для каждого стрУ Из СтрокиДляУдаления Цикл 
			тзВрем.Удалить(стрУ) ; 		
		КонецЦикла;	
		
		Если стрВх.ПродажаОпт  Тогда 
			
			Для каждого стрПокуп из тзПокуп Цикл 
				стрВых = тзДокВых.Добавить();
				стрВых.ВремТовары = Новый ТаблицаЗначений ; 
				Для н = 0 по колонок -1 Цикл
					стрВых[н] = стрВх[н];
				КонецЦикла ;	
				
				стрВых.КодКлиента = стрПокуп.КодКлиента ;
				
				Отбор = Новый Структура ("КодКлиента",стрПокуп.КодКлиента);
				
				тзВрем2 = тзВрем.Скопировать(Отбор,"Код,Цена,Количество,Сумма,Склад");	
				тзВрем2.Колонки.Добавить("Опер"); 
				
				Для каждого стр2 из тзВрем2 Цикл 
					стр2.Опер = ?((стр2.Сумма >= 0)И(стр2.Количество >= 0) ,"+","-");
					
					Если стр2.Опер = "-" Тогда 
						
						стр2.Сумма =- стр2.Сумма; 
						стр2.Количество =- стр2.Количество ;
						
					КонецЕсли ;	
					
				КонецЦикла ;
				
				Отбор 		= Новый Структура ("Опер","+");
				тзПродажи 	= тзВрем2.Скопировать(тзВрем2.НайтиСтроки(Отбор));
				ЕстьПродажи =  ТзПродажи.Количество() >0 ;
				
				Отбор.Опер  = "-" ;
				тзВозврат  	= тзВрем2.Скопировать(тзВрем2.НайтиСтроки(Отбор));
				ЕстьВозврат =  тзВозврат.Количество() >0 ;
				
				Если ЕстьВозврат Тогда 
					стрВых.Опер 	= "-";
					стрВых.Товары = тзВозврат ;
					Если ЕстьПродажи Тогда 
						
						стрВых = тзДокВых.Добавить();
						
						Для н = 0 по колонок -1 Цикл
							стрВых[н] = стрВх[н];
						КонецЦикла ;	
						
						стрВых.Опер 	= "+";
						стрВых.ВремТовары = тзПродажи ;
					КонецЕсли ;	
				Иначе
					стрВых.Опер 	= "+";
					стрВых.ВремТовары = тзПродажи ;
				КонецЕсли ;	
			КонецЦикла ;
			
		Иначе
			стрВых = тзДокВых.Добавить();
			
			Для н = 0 по колонок -1 Цикл
				стрВых[н] = стрВх[н];
			КонецЦикла ;	
			
			// Розница 			
			стрВых.ОплатаПлатежнымиКартами = БезналичныеОплаты.ОплатаПлатежнымиКартами ;
			стрВых.ОплатаБанковскимиКредитами = БезналичныеОплаты.ОплатаБанковскимиКредитами ;
			стрВых.КодКлиента = "-1"; 
			стрВых.ПродажиПоДисконтнымКартам = тзПокуп ;
			стрВых.Опер 	= "+";
			
			КолонкиСвертки = "Код,Цена,Склад" ;			
			
			тзВрем.Свернуть(КолонкиСвертки,"Количество,Сумма");
			
			тзВрем.Колонки.Добавить("Опер"); 
			
			Для каждого стр из тзВрем Цикл 
				стр.Опер = ?((стр.Сумма = 0)И(стр.Количество = 0) ,"0","+");
			КонецЦикла ;
			
			Отбор 		= Новый Структура ("Опер","+");
			тзПродажи 	= тзВрем.Скопировать(тзВрем.НайтиСтроки(Отбор));
			
			стрВых.ВремТовары = тзПродажи ;
			
		КонецЕсли ;	
		
	КонецЦикла ;
	Возврат тзДокВых ;
	
КонецФункции	

//////////////////////////////////////////////////////////
Функция ЗаполнитьДанныеДокументовВнутреннийЗаказПТУ(ТзДокВх,тзДанныеОтчетов)
	
	колонок = тзДокВх.Колонки.Количество();
	тзДокВых = тЗДокВх.СкопироватьКолонки(); // выходная копия 
	
	Для каждого стрВх из тзДокВх Цикл 
		
		Отбор = НОвый Структура ("НомерККМ,НомерОтчёта",
		стрВх.НомерККМ,
		стрВх.НомерОтчёта);
		
		тзВрем = тзДанныеОтчетов.Скопировать(тзДанныеОтчетов.НайтиСтроки(Отбор));	
		тзВрем.Свернуть("Код,Цена,Склад","Количество,Сумма");
		
		стрВых = тзДокВых.Добавить();
		
		Для н = 0 по колонок -1 Цикл
			стрВых[н] = стрВх[н];
		КонецЦикла ;	
		
		стрВых.Опер 	= "+";
		
		КолонкиСвертки = "Код,Цена,Склад" ;			
		
		тзВрем.Свернуть(КолонкиСвертки,"Количество,Сумма");
		
		тзВрем.Колонки.Добавить("Опер"); 
		
		Для каждого стр из тзВрем Цикл 
			стр.Опер = ?((стр.Сумма = 0)И(стр.Количество = 0) ,"0","+");
		КонецЦикла ;
		
		Отбор 		= Новый Структура ("Опер","+");
		тзПродажи 	= тзВрем.Скопировать(тзВрем.НайтиСтроки(Отбор));
		
		стрВых.ВремТовары = тзПродажи ;
		
		
	КонецЦикла ;
	Возврат тзДокВых ;
	
КонецФункции	

//////////////////////////////////////////////////////////
Функция ЗаполнитьДанныеДокументовИнв(ТзДокВх,тзДанныеОтчетов)
	
	колонок = тзДокВх.Колонки.Количество();
	тзДокВых = тЗДокВх.СкопироватьКолонки(); // выходная копия 
	
	Для каждого стрВх из тзДокВх Цикл 
		
		Отбор = НОвый Структура ("НомерККМ,НомерОтчёта",
		стрВх.НомерККМ,
		стрВх.НомерОтчёта);
		
		тзВрем = тзДанныеОтчетов.Скопировать(тзДанныеОтчетов.НайтиСтроки(Отбор));	
		тзВрем.Свернуть("Код,Цена,Склад","Количество,Сумма");
		
		стрВых = тзДокВых.Добавить();
		
		Для н = 0 по колонок -1 Цикл
			стрВых[н] = стрВх[н];
		КонецЦикла ;	
		
		стрВых.Опер 	= "+";
		
		КолонкиСвертки = "Код,Цена,Склад" ;			
		
		тзВрем.Свернуть(КолонкиСвертки,"Количество,Сумма");
		
		тзВрем.Колонки.Добавить("Опер"); 
		
		Для каждого стр из тзВрем Цикл 
			стр.Опер = ?((стр.Сумма = 0)И(стр.Количество = 0) ,"0","+");
		КонецЦикла ;
		
		Отбор 		= Новый Структура ("Опер","+");
		тзПродажи 	= тзВрем.Скопировать(тзВрем.НайтиСтроки(Отбор));
		
		стрВых.ВремТовары = тзПродажи ;
		
		
	КонецЦикла ;
	Возврат тзДокВых ;
	
КонецФункции	

//////////////////////////////////////////////////////////
Функция ЗаполнитьДанныеДокументовПродажа(ТзДокВх,тзДанныеОтчетов)
	
	колонок = тзДокВх.Колонки.Количество();
	тзДокВых = тЗДокВх.СкопироватьКолонки(); // выходная копия 
	ОтборДок = Новый Структура ("НомерККМ,НомерОтчёта,ПродажаОпт,КассаККМ") ;
	
	Для каждого стрВх из тзДокВх Цикл 
		
		ЗаполнитьЗначенияСвойств(ОтборДок,стрВх);	
		
		тзВрем = тзДанныеОтчетов.Скопировать(тзДанныеОтчетов.НайтиСтроки(ОтборДок));	
		
		КолонкиСвертки = "КодКлиента,Код,Цена,Склад,КодОплаты,НомерКартыБН" ;			
		
		Если ПродавецВОтчете Тогда 
			КолонкиСвертки = КолонкиСвертки + ",КодПродавца";
		КонецЕсли ;	
		
		Если ВключатьИнфЧекВОтчет Тогда	
			КолонкиСвертки = КолонкиСвертки + ",НомерЧека,ДатаВремя";
		КонецЕсли ;	
		
		тзВрем.Свернуть(КолонкиСвертки,"Количество,Сумма");
		
		тзПокуп = тзВрем.Скопировать(,"КодКлиента,Сумма");
		тзПокуп.Свернуть("КодКлиента","Сумма");
		
		БезналичныеОплаты =  БезналичныеОплаты(тзВрем) ;
		
		СтрокиДляУдаления = тзВрем.НайтиСтроки(Новый Структура("Код",""));
		
		Для каждого стрУ Из СтрокиДляУдаления Цикл 
			тзВрем.Удалить(стрУ) ; 		
		КонецЦикла;	
		
		Если стрВх.ПродажаОпт  Тогда 
			
			Для каждого стрПокуп из тзПокуп Цикл 
				стрВых = тзДокВых.Добавить();
				стрВых.ВремТовары = Новый ТаблицаЗначений ; 
				Для н = 0 по колонок -1 Цикл
					стрВых[н] = стрВх[н];
				КонецЦикла ;	
				
				стрВых.КодКлиента = стрПокуп.КодКлиента ;
				
				Отбор = Новый Структура ("КодКлиента",стрПокуп.КодКлиента);
				
				тзВрем2 = тзВрем.Скопировать(Отбор,"Код,Цена,Количество,Сумма,Склад");	
				тзВрем2.Колонки.Добавить("Опер"); 
				
				Для каждого стр2 из тзВрем2 Цикл 
					стр2.Опер = ?((стр2.Сумма >= 0)И(стр2.Количество >= 0) ,"+","-");
					
					Если стр2.Опер = "-" Тогда 
						
						стр2.Сумма =- стр2.Сумма; 
						стр2.Количество =- стр2.Количество ;
						
					КонецЕсли ;	
					
				КонецЦикла ;
				
				Отбор 		= Новый Структура ("Опер","+");
				тзПродажи 	= тзВрем2.Скопировать(тзВрем2.НайтиСтроки(Отбор));
				ЕстьПродажи =  ТзПродажи.Количество() >0 ;
				
				Отбор.Опер  = "-" ;
				тзВозврат  	= тзВрем2.Скопировать(тзВрем2.НайтиСтроки(Отбор));
				ЕстьВозврат =  тзВозврат.Количество() >0 ;
				
				Если ЕстьВозврат Тогда 
					стрВых.Опер 	= "-";
					стрВых.Товары = тзВозврат ;
					Если ЕстьПродажи Тогда 
						
						стрВых = тзДокВых.Добавить();
						
						Для н = 0 по колонок -1 Цикл
							стрВых[н] = стрВх[н];
						КонецЦикла ;	
						
						стрВых.Опер 	= "+";
						стрВых.ВремТовары = тзПродажи ;
					КонецЕсли ;	
				Иначе
					стрВых.Опер 	= "+";
					стрВых.ВремТовары = тзПродажи ;
				КонецЕсли ;	
			КонецЦикла ;
			
		Иначе
			стрВых = тзДокВых.Добавить();
			ЗаполнитьЗначенияСвойств(стрВых,стрВх);
			
			// Розница 			
			стрВых.ОплатаПлатежнымиКартами = БезналичныеОплаты.ОплатаПлатежнымиКартами ;
			стрВых.ОплатаБанковскимиКредитами = БезналичныеОплаты.ОплатаБанковскимиКредитами ;
			стрВых.КодКлиента = "-1"; 
			стрВых.ПродажиПоДисконтнымКартам = тзПокуп ;
			стрВых.Опер 	= "+";
			
			КолонкиСвертки = "Код,Цена,Склад,КодКлиента" ;			
			
			Если ПродавецВОтчете Тогда 
				КолонкиСвертки = КолонкиСвертки + ",КодПродавца";
			КонецЕсли ;	
			Если ВключатьИнфЧекВОтчет Тогда	
				КолонкиСвертки = КолонкиСвертки + ",НомерЧека,ДатаВремя";
			КонецЕсли ;	
			
			
			тзВрем.Свернуть(КолонкиСвертки,"Количество,Сумма");
			
			тзВрем.Колонки.Добавить("Опер"); 
			
			Для каждого стр из тзВрем Цикл 
				стр.Опер = ?((стр.Сумма = 0)И(стр.Количество = 0) ,"0","+");
			КонецЦикла ;
			
			Отбор 		= Новый Структура ("Опер","+");
			тзПродажи 	= тзВрем.Скопировать(тзВрем.НайтиСтроки(Отбор));
			
			стрВых.ВремТовары = тзПродажи ;
			
		КонецЕсли ;	
		
	КонецЦикла ;
	Возврат тзДокВых ;
	
КонецФункции	

////////////////////////////////////////////////////////////////\\
Функция РазобратьДанныеПродажа(тзДанные)
	
	Если Не ДелитьПоКонтрагентам Тогда 
		тзДанные.ЗаполнитьЗначения("-1","КодКлиента");	
	Иначе
		Для каждого стр из тзДанные Цикл 
			Если ПустаяСтрока(стр.КодКлиента) Тогда 		
				стр.КодКлиента = "-1";
			КонецЕсли ;	
		КонецЦикла ;		
	КонецЕсли ;	
	КолонкиСвертки = "НомерККМ,НомерОтчёта,КоличествоЧеков,КодКлиента,Код,Цена,Отдел,КодОплаты,НомерКартыБН";	
	
	Если ПродавецВОтчете Тогда 
		КолонкиСвертки = КолонкиСвертки + ",КодПродавца";
	КонецЕсли ;	
	Если ВключатьИнфЧекВОтчет Тогда 
		КолонкиСвертки = КолонкиСвертки + ",НомерЧека,ДатаВремя";
	КонецЕсли ;	
	
	тзДанные.Свернуть(КолонкиСвертки,"Количество,Сумма");
	тзДанные.Колонки.Добавить("Склад");
	тзДанные.Колонки.Добавить("ПродажаОпт");
	тзДанные.Колонки.Добавить("КассаККМ");
	тзДанные.ЗаполнитьЗначения(Ложь,"ПродажаОпт") ;
	// Установка Склада по отделу или по умолчанию 
	Для каждого стр из ТЗДанные Цикл
		Если Стр.Отдел = Неопределено Тогда 
			Продолжить ;
		КонецЕсли ;	
		стр.КассаККМ  = НайтиККМ(стр.НомерККМ);
		Отбор = Новый Структура("ККМ,Отдел",стр.КассаККМ,стр.Отдел); 
		массив = ККМСклад.НайтиСтроки(Отбор);
		Если Массив.Количество() >0 Тогда 
			// Нашли Склад для отдела 
			ЗаполнитьЗначенияСвойств(стр, массив[0]);
			ККМЗамена = массив[0].ККМЗамена ;
			Если  Не ККМЗамена.Пустая() Тогда 
				стр.КассаККМ = ККМЗамена ;
			КонецЕсли ;	
		Иначе
			Отбор.Отдел = 0 ; // Ищем склад по умолчанию, Отдел = 0 
			массив = ККМСклад.НайтиСтроки(Отбор);
			Если Массив.Количество() =1 Тогда 
				ЗаполнитьЗначенияСвойств(стр, массив[0]);
				ККМЗамена = массив[0].ККМЗамена ;
				Если  Не ККМЗамена.Пустая() Тогда 
					стр.КассаККМ = ККМЗамена ;
				КонецЕсли ;	
			Иначе
				Сообщить("Не найдена ККМ в таблице ККМ-Отдел-СКлад "+ 
				стр.КассаККМ.Наименование + " отдел  " + 
				строка(стр.Отдел),
				статусСообщения.Внимание);	
			КонецЕсли 
		КонецЕсли ;	
	КонецЦикла ;
	
	// Данные для отбора документов  
	тзДок = тзДанные.Скопировать(,"НомерККМ,КассаККМ,НомерОтчёта,КоличествоЧеков,ПродажаОпт,Количество");
	тзДок.Свернуть("НомерККМ,КассаККМ,НомерОтчёта,КоличествоЧеков,ПродажаОпт","Количество");
	
	стрУдалить  = тзДок.НайтиСтроки(Новый Структура("КассаККМ",Неопределено));
	
	Для каждого стрУ из СтрУдалить Цикл 
		тзДок.Удалить(стрУ);		
	КонецЦикла ;
	
	тзДок.Колонки.Удалить("Количество");
	тзДок.Сортировать("КассаККМ Возр,НомерОтчёта Возр");
	//
	тзДок.Колонки.Добавить("КодКлиента");
	тзДок.Колонки.Добавить("Контрагент");
	тзДок.Колонки.Добавить("Подразделение");
	тзДок.Колонки.Добавить("ВремТовары");
	тзДок.Колонки.Добавить("Опер");
	тзДок.Колонки.Добавить("ДисконтнаяКарта");
	тзДок.Колонки.Добавить("ОплатаПлатежнымиКартами");
	тзДок.Колонки.Добавить("ОплатаБанковскимиКредитами");
	тзДок.Колонки.Добавить("ПродажиПоДисконтнымКартам");
	
	Возврат ЗаполнитьДанныеДокументовПродажа(тзДок,тзДанные);
	
КонецФункции

////////////////////////////////////////////////////////////////\\
Функция РазобратьДанныеВнутреннийЗаказПТУ(тзДанные)
	тзДанные.Свернуть("НомерККМ,НомерОтчёта,Код,Цена,Отдел","Количество,Сумма");
	тзДанные.Колонки.Добавить("Склад");
	тзДанные.Колонки.Добавить("КассаККМ");
	// Установка Склада по отделу или по умолчанию 
	Для каждого стр из ТЗДанные Цикл
		Если Стр.Отдел = Неопределено Тогда 
			Продолжить ;
		КонецЕсли ;	
		стр.КассаККМ  = НайтиККМ(стр.НомерККМ);
		Отбор = Новый Структура("ККМ,Отдел",стр.КассаККМ,стр.Отдел); 
		массив = ККМСклад.НайтиСтроки(Отбор);
		Если Массив.Количество() >0 Тогда 
			// Нашли Склад для отдела 
			ЗаполнитьЗначенияСвойств(стр, массив[0]);
			ККМЗамена = массив[0].ККМЗамена ;
			Если  Не ККМЗамена.Пустая() Тогда 
				стр.КассаККМ = ККМЗамена ;
			КонецЕсли ;	
		Иначе
			Отбор.Отдел = 0 ; // Ищем склад по умолчанию, Отдел = 0 
			массив = ККМСклад.НайтиСтроки(Отбор);
			Если Массив.Количество() =1 Тогда 
				ЗаполнитьЗначенияСвойств(стр, массив[0]);
				ККМЗамена = массив[0].ККМЗамена ;
				Если  Не ККМЗамена.Пустая() Тогда 
					стр.КассаККМ = ККМЗамена ;
				КонецЕсли ;	
			Иначе
				Сообщить("Не найдена ККМ в таблице ККМ-Отдел-СКлад "+ 
				стр.КассаККМ.Наименование + " отдел  " + 
				строка(стр.Отдел),
				статусСообщения.Внимание);	
			КонецЕсли 
		КонецЕсли ;	
	КонецЦикла ;	
	// Данные для отбора документов  
	тзДок = тзДанные.Скопировать(,"НомерККМ,КассаККМ,Склад,НомерОтчёта,Количество");
	тзДок.Свернуть("НомерККМ,КассаККМ,НомерОтчёта,Склад","Количество");
	
	тзДок.Колонки.Удалить("Количество");
	тзДок.Сортировать("КассаККМ Возр,НомерОтчёта Возр");
	тзДок.Колонки.Добавить("КодКлиента");
	тзДок.Колонки.Добавить("Контрагент");
	тзДок.Колонки.Добавить("Подразделение");
	тзДок.Колонки.Добавить("ВремТовары");
	тзДок.Колонки.Добавить("Опер");
	Возврат ЗаполнитьДанныеДокументовВнутреннийЗаказПТУ(тзДок,тзДанные);
	
КонецФункции
////////////////////////////////////////////////////////////////\\
Функция РазобратьДанныеИнвСервер(тзДанные)
	Ответ = Новый ТаблицаЗначений ;
	Ответ.Колонки.Добавить("Склад");
	Ответ.Колонки.Добавить("ВремТовары");
	стр = Ответ.Добавить();
	стр.ВремТовары = тзДанные.СКопировать() ;
	Возврат Ответ ;
	
КонецФункции

////////////////////////////////////////////////////////////////\\
Функция РазобратьДанныеИнв(тзДанные)
	тзДанные.Свернуть("НомерККМ,НомерОтчёта,Код,Цена,Отдел","Количество,Сумма");
	тзДанные.Колонки.Добавить("Склад");
	тзДанные.Колонки.Добавить("КассаККМ");
	
	// Установка Склада по отделу или по умолчанию 
	Для каждого стр из ТЗДанные Цикл
		Если Стр.Отдел = Неопределено Тогда 
			Продолжить ;
		КонецЕсли ;	
		стр.КассаККМ  = НайтиККМ(стр.НомерККМ);
		Отбор = Новый Структура("ККМ,Отдел",стр.КассаККМ,стр.Отдел); 
		массив = ККМСклад.НайтиСтроки(Отбор);
		Если Массив.Количество() >0 Тогда 
			// Нашли Склад для отдела 
			ЗаполнитьЗначенияСвойств(стр, массив[0]);
		Иначе
			Отбор.Отдел = 0 ; // Ищем склад по умолчанию, Отдел = 0 
			массив = ККМСклад.НайтиСтроки(Отбор);
			Если Массив.Количество() =1 Тогда 
				ЗаполнитьЗначенияСвойств(стр, массив[0]);
			Иначе
				Сообщить("Не найдена ККМ в таблице ККМ-Отдел-СКлад "+ 
				стр.КассаККМ.Наименование + " отдел  " + 
				строка(стр.Отдел),
				статусСообщения.Внимание);	
			КонецЕсли 
		КонецЕсли ;	
	КонецЦикла ;
	
	// Данные для отбора документов  
	тзДок = тзДанные.Скопировать(,"НомерККМ,КассаККМ,НомерОтчёта,Склад,Количество");
	тзДок.Свернуть("НомерККМ,КассаККМ,НомерОтчёта,Склад","Количество");
	
	тзДок.Колонки.Удалить("Количество");
	тзДок.Сортировать("КассаККМ Возр,НомерОтчёта Возр");
	тзДок.Колонки.Добавить("КодКлиента");
	тзДок.Колонки.Добавить("Контрагент");
	тзДок.Колонки.Добавить("Подразделение");
	тзДок.Колонки.Добавить("ВремТовары");
	тзДок.Колонки.Добавить("Опер");
	Возврат ЗаполнитьДанныеДокументовИнв(тзДок,тзДанные);
	
КонецФункции

///////////////////////////////////////////////////////////////////////
Функция РазобратьДанныеПоКредитам(тзДанные)
	врем = ТЗДанные.Скопировать(,"НомерОтчёта,НомерККМ,Кредит");
	врем.Свернуть("НомерОтчёта,НомерККМ","Кредит");
	
	тзДок = Новый ТаблицаЗначений ;
	тзДок.Колонки.Добавить("НомерОтчёта");
	тзДок.Колонки.Добавить("НомерККМ");
	тзДок.Колонки.Добавить("Аванс");
	тзДок.Колонки.Добавить("тчДок");
	тзДок.Колонки.Добавить("КассаККМ");
	
	тчДок = Новый ТаблицаЗначений;
	тчДок.Колонки.Добавить("Контрагент");
	тчДок.Колонки.Добавить("ДисконтнаяКарта");
	тчДок.Колонки.Добавить("Сумма");
	тчДок.Колонки.Добавить("КодКлиента");
	тчДок.Колонки.Добавить("КассаККМ");
	
	Для каждого стр  из врем цикл
		Отбор  = Новый Структура("НомерОтчёта,НомерККМ",стр.НомерОтчёта,стр.НомерККМ); 			
		КассаККМ = НайтиККМ(стр.НомерККМ) ;
		тчАвансы  = тчДок.Скопировать();
		тчКредиты = тчДок.Скопировать();
		массив = тзДанные.НайтиСтроки(Отбор);	
		Для каждого м из массив Цикл
			Если м.Аванс <>0 Тогда 
				стр1 = тчАвансы.Добавить();
				стр1.КодКлиента = м.КодКлиента ;
				стр1.Сумма = -м.Аванс ;
				стр1.КассаККМ = КассаККМ ;
				ЗаполнитьДанныеПоПокупателю(стр1);
			КонецЕсли ;	
			Если м.Кредит <>0 Тогда 
				стр1 = тчКредиты.Добавить();
				стр1.КодКлиента = м.КодКлиента ;
				стр1.Сумма = м.Кредит ;
				стр1.КассаККМ = КассаККМ ;
				ЗаполнитьДанныеПоПокупателю(стр1);
			КонецЕсли ;	
		КонецЦикла ;	
		Если тчАвансы.Количество()>0 Тогда 
			стр2 = тзДок.Добавить();
			стр2.НомерОтчёта = стр.НомерОтчёта ;
			стр2.НомерККМ = стр.НомерККМ ;
			стр2.КассаККМ = КассаККМ ;
			стр2.Аванс = Истина ;
			стр2.тчДок  = тчАвансы.Скопировать() ;
		КонецЕсли ;
		Если тчКредиты.Количество()>0 Тогда 
			стр2 = тзДок.Добавить();
			стр2.НомерОтчёта = стр.НомерОтчёта ;
			стр2.НомерККМ = стр.НомерККМ ;
			стр2.КассаККМ = КассаККМ ;
			стр2.Аванс = Ложь ;
			стр2.тчДок  = тчКредиты.Скопировать() ;
		КонецЕсли ;
		
	КонецЦикла ;	
	Возврат тзДок ;
	
КонецФункции
/////////////////////////////////////////////////////////////////////////
Функция СформироватьДокументКредитнаяИстория(Данные)
	
	Комментарий = ?(Данные.Аванс,"Аванс","Кредит") + 
	" ккм "+ Строка(Данные.НомерККМ) +   	
	" отчет  "+ Строка(Данные.НомерОтчёта) +   	
	" " + Данные.ИмяФайла ;
	Док = Документы.ВводНачальныхОстатковПоВзаиморасчетам.СоздатьДокумент();
	Док.ОтражатьВУправленческомУчете = 1 ;
	Док.Организация = Данные.КассаККМ.Владелец ;
	Док.ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыСПокупателями ;
	Док.Дата = Данные.Дата ;		
	Док.Комментарий = Комментарий ;
	тч = Док.РасчетыСКонтрагентами.Выгрузить();
	
	Для Каждого стр1 из Данные.ТчДок Цикл 
		стр2 = тч.Добавить();
		стр2.Контрагент = стр1.Контрагент ;
		стр2.ДоговорКонтрагента = стр1.Контрагент.ОсновнойДоговорКонтрагента ;
		стр2.СуммаВзаиморасчетов = стр1.Сумма;
		стр2.ВалютаВзаиморасчетов = стр1.Контрагент.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов;
		стр2.КратностьВзаиморасчетов = 1;
		стр2.КурсВзаиморасчетов = 1;
		стр2.СуммаРегл = стр2.СуммаВзаиморасчетов;
		стр2.СуммаУпр = стр2.СуммаВзаиморасчетов;
	КонецЦикла ;	
	ТЧ.Сортировать("Контрагент");
	Док.РасчетыСКонтрагентами.Загрузить(ТЧ);
	ЗаписатьДокумент(Док);
КонецФункции
///////////////////////////////////////////////////////////////////////
Функция СформироватьТаблицыДокументовПродажа(ИмяФайла,тзДанные,тзКредиты,ОплатаБонусами)
	
	База = Новый XBase(ИмяФайла,,Истина);
	
	База.Первая();
	ИмяПоля1 = ВРЕГ(База.Поля[0].Имя);
	Если ИмяПоля1 = "LINE" Тогда
		// копия журнала  и развернутый 
		тзДанные = тзКопияЖурнала(База,тзКредиты,ОплатаБонусами);
		тзДанные = РазобратьДанныеПродажа(тзДанные);
		тзКредиты = РазобратьДанныеПоКредитам(тзКредиты); 
		рез = Истина ;
	ИначеЕсли ИмяПоля1 = "KASSANUM"	Тогда
		// сыодный отчет 
		Сообщить("сводный отчет не обрабатывается");
		рез = ложь ;
	Иначе
		Предупреждение("Данный тип файла не обрабатвается Первое поле файла = "+ИмяПоля1);
		рез = Ложь ;
	КонецЕсли; 
	База.ЗакрытьФайл();
	
	Возврат рез ;
	
КонецФункции

///////////////////////////////////////////////////////////////////////
Функция СформироватьТаблицыДокументовИнв(ИмяФайла,тзДанные)
	База = Новый XBase(ИмяФайла);
	База.Первая();
	ИмяПоля1 = ВРЕГ(База.Поля[0].Имя);
	Если ИмяПоля1 = "LINE" Тогда
		// копия журнала  и развернутый 
		тзДанные = тзКопияЖурналаИнв(База);
		тзДанные = РазобратьДанныеИнв(тзДанные);
		рез = Истина ;
	ИначеЕсли ИмяПоля1 = "KASSANUM"	Тогда
		// сыодный отчет 
		Сообщить("сводный отчет не обрабатывается");
		рез = ложь ;
	Иначе
		Предупреждение("Данный тип файла не обрабатвается Первое поле файла = "+ИмяПоля1);
		рез = Ложь ;
	КонецЕсли; 
	Возврат рез ;
	
КонецФункции

Функция СформироватьТаблицыДокументовИнвСервер(ИмяФайла,тзДанные)
	База = Новый XBase(ИмяФайла);
	База.Первая();
	ИмяПоля1 = ВРЕГ(База.Поля[0].Имя);
	Если ИмяПоля1 = "CODE" Тогда
		тзДанные = тзКопияЖурналаИнвСервер(База);
		тзДанные =РазобратьДанныеИнвСервер(тзДанные) ;
		рез = Истина ;
	Иначе
		Предупреждение("Данный тип файла инвернтаризации не обрабатвается Первое поле файла = "+ИмяПоля1);
		рез = Ложь ;
	КонецЕсли; 
	Возврат рез ;
	
КонецФункции

///////////////////////////////////////////////////////////////////////
Функция СформироватьТаблицыДокументовВнутреннийЗаказПТУ(ИмяФайла,тзДанные)
	рез = ложь ;
	База = Новый XBase(ИмяФайла);
	База.Первая();
	ИмяПоля1 = ВРЕГ(База.Поля[0].Имя);
	Если ИмяПоля1 = "LINE" Тогда
		// копия журнала  и развернутый 
		тзДанные = тзКопияЖурналаВнутреннийЗаказПТУ(База);
		тзДанные = РазобратьДанныеВнутреннийЗаказПТУ(тзДанные);
		рез = Истина ;
	ИначеЕсли ИмяПоля1 = "KASSANUM"	Тогда
		// сыодный отчет 
		Сообщить("сводный отчет не обрабатывается");
	Иначе
		Предупреждение("Данный тип файла не обрабатвается Первое поле файла = "+ИмяПоля1);
	КонецЕсли; 
	Возврат рез ;
КонецФункции

///////////////////////////////////////////////////////////////////////
Функция СформироватьТаблицыДокументовПТУ(ИмяФайла,тзДанные)
	рез = ложь ;
	База = Новый XBase(ИмяФайла);
	База.Первая();
	ИмяПоля1 = ВРЕГ(База.Поля[0].Имя);
	Если ИмяПоля1 = "LINE" Тогда
		// копия журнала  и развернутый 
		тзДанные = тзКопияЖурналаВнутреннийЗаказПТУ(База);
		тзДанные = РазобратьДанныеВнутреннийЗаказПТУ(тзДанные);
		рез = Истина ;
	ИначеЕсли ИмяПоля1 = "KASSANUM"	Тогда
		// сыодный отчет 
		Сообщить("сводный отчет не обрабатывается");
	Иначе
		Предупреждение("Данный тип файла не обрабатвается Первое поле файла = "+ИмяПоля1);
	КонецЕсли; 
	Возврат рез ;
КонецФункции

/////////////////////////////////////////////////////////
Процедура ЗаполнитьДисконтныеКартыПоРознице(Данные)
	
	ВхДанные = Данные.ПродажиПоДисконтнымКартам ;
	
	Если ВхДанные = Неопределено Тогда 
		Возврат ;
	КонецЕсли ;
	
	ВхДанные.Колонки.Добавить("КассаККМ");
	ВхДанные.ЗаполнитьЗначения(Данные.КассаККМ,"КассаККМ");
	
	ТзДисконт = Документы.ОтчетОРозничныхПродажах.ПустаяССылка().ПродажиПоДисконтнымКартам.Выгрузить();
	Если ВхДанные.Количество() >0 Тогда 
		
		Для Каждого стр из ВхДанные Цикл 
			Если стр.КодКлиента = "-1" Тогда 
				Продолжить ;
			КонецЕсли ;	
			ДанныеКарты = Новый Структура("КодКлиента,КассаККМ,ДисконтнаяКарта,Контрагент",стр.КодКлиента,стр.КассаККМ);
			ЗаполнитьДанныеПоПокупателю(ДанныеКарты);
			стр1 = ТзДисконт.Добавить();			
			стр1.ДисконтнаяКарта = ДанныеКарты.ДисконтнаяКарта ;
			стр1.ВладелецДисконтнойКарты = ДанныеКарты.Контрагент ;
			стр1.Сумма = стр.Сумма ;
		КонецЦикла ;
		
	КонецЕсли ;
	Отбор = НОвый Структура("Сумма",0);
	
	Строки  = ТзДисконт.НайтиСтроки(Отбор)  ;
	Для каждого стр из строки цикл 
		ТзДисконт.Удалить(стр);
	конецЦикла  ;
	
	Данные.ПродажиПоДисконтнымКартам = ТзДисконт.Скопировать();
	
КонецПроцедуры 

Функция ДоговорПокупателя(Контрагент,Организация)
	Ответ = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() ;
	Запрос = Новый Запрос ;
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("Владелец",Контрагент);
	Запрос.УстановитьПараметр("ВидДоговора",Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
	|	И ДоговорыКонтрагентов.Владелец = &Владелец";
	тз = Запрос.Выполнить().Выгрузить();				   
	Если тз.Количество() = 1 Тогда 
		Ответ = тз[0].ссылка;
		
	КонецЕсли ;	
	
	Возврат Ответ ;
	
КонецФункции  	
/////////////////////////////////////////////
Функция ХозяинКарты(Контрагент)
	мз = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
	мз.Объект = Контрагент ;
	мз.Свойство = СвойствоХозяинКарты ;
	мз.Прочитать();
	
	Возврат ?(мз.Выбран(),мз.Значение,справочники.Контрагенты.ПустаяСсылка());
	
КонецФункции 	

////////////////////////////////////////////////////////////
// структура входящей таблицы совпадает с таблицей докумете ОтчетККМ.ПродажиПоДисконтнымКартам
Функция НачисленныеБонусыПриПродаже(Данные)
	Организация = Данные.КассаККМ.Владелец ;
	ПродажиПоДисконтнымКартам = Данные.ПродажиПоДисконтнымКартам ;
	
	Авансы = Документы.ВводНачальныхОстатковПоВзаиморасчетам.СоздатьДокумент().Авансы.Выгрузить();
	Для каждого стр из ПродажиПоДисконтнымКартам Цикл
		стр1 = НачислениеБонусов.Найти(стр.ДисконтнаяКарта.ВидДисконтнойКарты,"ВидКарты");		
		СуммаБонусов = 0 ; 
		СуммаХозяину = 0 ; 
		Если стр1<> Неопределено Тогда 
			Если стр1.Платежная Тогда
				СуммаБонусов = ?(стр1.Платежная,
				стр1.ПроцентОтПокупокНаКарту /100 * стр.Сумма,
				0);
			КонецЕсли ;	
			СуммаХозяину = стр1.ПроцентОтПокупокХозяину /100 * стр.Сумма ;
			Контрагент = стр.ВладелецДисконтнойКарты;
			
			Если СуммаБонусов <> 0 Тогда
				
				стр2 = Авансы.Добавить();
				стр2.Контрагент = Контрагент ;
				стр2.ДоговорКонтрагента = ДоговорПокупателя(Контрагент,Организация) ;
				
				стр2.СуммаРегл = СуммаБонусов ;
				стр2.СуммаУпр  = СуммаБонусов ;
				стр2.СуммаВзаиморасчетов = СуммаБонусов ;
				
			КонецЕсли ;	
			
			Если СуммаХозяину <> 0 Тогда
				ХозяинКарты = ХозяинКарты(стр.ВладелецДисконтнойКарты);	
				
				Если Не ХозяинКарты.Пустая() Тогда 
					
					стр2 = Авансы.Добавить();
					стр2.Контрагент = ХозяинКарты ;
					стр2.ДоговорКонтрагента = ДоговорПокупателя(ХозяинКарты,Организация) ;
					
					стр2.СуммаРегл = СуммаХозяину ;
					стр2.СуммаУпр  = СуммаХозяину ;
					стр2.СуммаВзаиморасчетов = СуммаХозяину ;
					
				КонецЕсли ;
				
			КонецЕсли ;	
			
			
		КонецЕсли ;
		
	КонецЦикла ;
	
	Если Авансы.Количество() > 0 Тогда 
		Авансы.ЗаполнитьЗначения(Константы.ВалютаРегламентированногоУчета.Получить(),"ВалютаВзаиморасчетов");
		Авансы.ЗаполнитьЗначения(1,"КратностьВзаиморасчетов");
		Авансы.ЗаполнитьЗначения(1,"КурсВзаиморасчетов");
	КонецЕсли ;	
	
	Возврат Авансы ;
	
КонецФункции  

Функция СписанныеБонусыПриПродаже(Данные)
	Организация = Данные.КассаККМ.Владелец ;
	ОплатаБонусами = Данные.ОплатаБонусами ;				
	Кредиты = Документы.ВводНачальныхОстатковПоВзаиморасчетам.СоздатьДокумент().РасчетыСКонтрагентами.Выгрузить();
	
	Для каждого стр из ОплатаБонусами Цикл
		стр1 = Кредиты.Добавить();
		стр1.Контрагент = стр.Контрагент ;
		стр1.ДоговорКонтрагента = ДоговорПокупателя(стр.Контрагент,Организация) ;
		стр1.СуммаРегл = стр.Сумма ;
		стр1.СуммаУпр  = стр.Сумма ;
		стр1.СуммаВзаиморасчетов = стр.Сумма ;
	КонецЦикла ;
	
	Если Кредиты.Количество() > 0 Тогда 
		Кредиты.ЗаполнитьЗначения(Константы.ВалютаРегламентированногоУчета.Получить(),"ВалютаВзаиморасчетов");
		Кредиты.ЗаполнитьЗначения(1,"КратностьВзаиморасчетов");
		Кредиты.ЗаполнитьЗначения(1,"КурсВзаиморасчетов");
	КонецЕсли ;	
	
	Возврат Кредиты ;
	
КонецФункции 

Процедура УчестьБонусныеОперации(Данные,Комментарий)
	Авансы = НачисленныеБонусыПриПродаже(Данные);
	Кредиты = СписанныеБонусыПриПродаже(Данные);
	Если Авансы.Количество() > 0 Тогда 
		Док = Документы.ВводНачальныхОстатковПоВзаиморасчетам.СоздатьДокумент();
		Док.Авансы.Загрузить(Авансы);
		Док.Дата = НачалоДня(Данные.Дата)+3600*24;
		Док.ВидОперации 	= Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыСПокупателями;
		Док.Организация		= Данные.КассаККМ.Владелец;
		Док.Ответственный 	= ПараметрыСеанса.ТекущийПользователь;
		Док.ОтражатьВУправленческомУчете	= Истина;
		Док.Комментарий = "Начисление бонусов " +Комментарий;
		ЗаписатьДокумент(Док);
	КонецЕсли ;
	
	Если Кредиты.Количество() > 0 Тогда 
		Док = Документы.ВводНачальныхОстатковПоВзаиморасчетам.СоздатьДокумент();
		Док.РасчетыСКонтрагентами.Загрузить(Кредиты);
		Док.Дата = НачалоДня(Данные.Дата)+3600*24;
		Док.ВидОперации 	= Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыСПокупателями;
		Док.Организация		= Данные.КассаККМ.Владелец;
		Док.Ответственный 	= ПараметрыСеанса.ТекущийПользователь;
		Док.ОтражатьВУправленческомУчете	= Истина;
		Док.Комментарий = "Списание бонусов " +Комментарий;
		ЗаписатьДокумент(Док);
	КонецЕсли ;
	
КонецПроцедуры 	
//////////////////////////////////////////////////////////////
Функция СформироватьДокументПродажа(Данные,ОперативныйДокумент)
	Комментарий = Строка(Данные.НомерККМ) + " смена " +Строка(Данные.НомерОтчёта) + " чеков " +Строка(Данные.КоличествоЧеков)+ " "+Данные.ИмяФайла;  
	
	Если Данные.ПродажаОпт Тогда 
		// Оптовая продажа 
		Если Данные.Опер = "+" Тогда 
			ДокументПродажаОпт(Данные,Комментарий,ОперативныйДокумент);
		ИначеЕсли Данные.Опер = "-" Тогда 
			ДокументВозвратОпт(Данные,Комментарий,ОперативныйДокумент);
		КонецЕсли;		
	Иначе
		// Розничная  продажа 
		Если Данные.Опер = "+" Тогда 
			
			ЗаполнитьДисконтныеКартыПоРознице(Данные);
			ДокументПродажаРозница(Данные,Комментарий,ОперативныйДокумент);
			
			Если РасчетБонусныхОпераций Тогда 
				УчестьБонусныеОперации(Данные,Комментарий);	
			КонецЕсли ;	
			
		ИначеЕсли Данные.Опер = "-" Тогда 
			
			Предупреждение("Свяжитесь с разрабатчикои (в описании)" + Символы.ПС+
			"ДОКУМЕНТ ВОЗВРАТ-РОЗНИЦА НЕ ДОЛЖЕН Формироваться !!! ",);
			
		КонецЕсли;		
		
	КонецЕсли ;	
КонецФункции	
//////////////////////////////////////////////////////////////
Функция СформироватьДокументИнв(Данные)
	Комментарий = "Инвентаризация прием из ККМ "+Данные.ИмяФайла;  
	ДокументИнвентаризация(Данные,Комментарий);
КонецФункции	

Функция СформироватьДокументВнутреннийЗаказ(Данные)
	Комментарий = "Внутренний заказ оформлено на кассе "+ Данные.ИмяФайла;  
	ДокументВнутреннийЗаказ(Данные,Комментарий);
	
КонецФункции

Функция СформироватьДокументПТУ(Данные)
	Комментарий = "Поступление из торгсервиса "+ Данные.ИмяФайла;  
	ДокументПТУ(Данные,Комментарий);
	
КонецФункции

///////////////////////////////////////////////// 
// Получаем структуру : Дата , КодСклада ;
// КодСКлада с ведущими 0 
/////////////////////////////////////////////////
Функция СтруктураИзИмениФайла(ИмяФайла)
	// rep_53_08042004_112239.DBF
	// rep_08042004_112239.DBF
	рез  = Новый Структура ; 
	
	Если СтрЧислоВхождений(ИмяФайла,"_") = 3   
		ИЛИ СтрЧислоВхождений(ИмяФайла,"_") = 2 Тогда
		ДлИмени = СтрДлина(ИмяФайла);
		ЧастьДатыВремени = Сред (ИмяФайла,ДлИмени-18,15);
		
		ДатаЧ=Сред(ЧастьДатыВремени,1,2);
		ДатаМ=Сред(ЧастьДатыВремени,3,2);
		ДатаГ= Сред(ЧастьДатыВремени,5,4);   
		
		ВремяДок=Сред(ЧастьДатыВремени,10,6);
		
		ДатаВремя=Дата(ДатаГ+ДатаМ+ДатаЧ + ВремяДок) ; 
		рез.Вставить("Дата",ДатаВремя); 
		
		НачалоИмени   = Лев(ИмяФайла,ДлИмени-20); 
		ДлНачалаИмени = СтрДлина(НачалоИмени);	
		
		КодСклада 	  = Сред(НачалоИмени,5,ДлНачалаИмени-4);
		
		
		рез.Вставить("КодСклада",КодСклада); 
		
	Иначе
		Сообщить("Не обрабатывается имя файла "+ИмяФайла ); 
	КонецЕсли;	
	Возврат рез  ; 
КонецФункции 
Функция ПродавецТовара(КодПродавца)
	
	рез = Справочники.ФизическиеЛица.ПустаяСсылка() ;
	
	Если Не ПустаяСтрока(КодПродавца) Тогда 
		КодФл = Прав(КодПродавца,9) ;
		рез  = Справочники.ФизическиеЛица.НайтиПоКоду(КодФл) ;
		
	КонецЕсли ;
	Возврат рез ;
	
КонецФункции 
//////////////////////////////////////////////////////////////
Процедура СформироватьТЧДок(ВремТовары,Товары,Услуги)
	ФильтрПоНулевым = Новый Структура;
	ФильтрПоНулевым.Вставить("Количество",0);
	ФильтрПоНулевым.Вставить("Сумма",0);
	
	Пустые = ВремТовары.НайтиСтроки(ФильтрПоНулевым);
	Для каждого стр из Пустые Цикл 
		ВремТовары.Удалить(стр);	
	КонецЦикла ;	
	
	Если ВремТовары.Количество()=0 ТОгда 
		Возврат ;
	КонецЕсли ;	
	
	Товары = Документы.РеализацияТоваровУслуг.ПустаяСсылка().Товары.Выгрузить();
	Услуги = Документы.РеализацияТоваровУслуг.ПустаяСсылка().Услуги.Выгрузить();
	Товары.Колонки.Удалить("Количество");
	Товары.Колонки.Удалить("Сумма");
	Товары.Колонки.Добавить("Количество");
	Товары.Колонки.Добавить("Сумма");
	Если ПродавецВОтчете Тогда 
		Товары.Колонки.Добавить("Продавец");
	КонецЕсли ;
	Если ВключатьИнфЧекВОтчет Тогда 
		Товары.Колонки.Добавить("ДатаВремя");
		Товары.Колонки.Добавить("НомерЧека");
		Товары.Колонки.Добавить("Покупатель");
	КонецЕсли ;	
	
	Для каждого стр из времТовары Цикл 
		Табл = Товары ; 
		
		Номенклатура = СправочникНоменклатура(стр.код);			
		
		стр1 = Табл.Добавить();
		стр1.Номенклатура  = Номенклатура; 
		стр1.СтавкаНДС  = Номенклатура.СтавкаНДС;
		стр1.Количество = стр.Количество;
		стр1.Сумма = стр.Сумма;
		стр1.Цена = стр.Цена;
		
		Если Табл = Товары Тогда 
			стр1.ЕдиницаИзмерения  = Номенклатура.ЕдиницаХраненияОстатков;
			стр1.ЕдиницаИзмеренияМест  = Номенклатура.ЕдиницаХраненияОстатков;
			стр1.КоличествоМест = стр.Количество;
		Иначе
			стр1.Содержание  = Номенклатура.Наименование;
		КонецЕсли;
		
		Если ПродавецВОтчете Тогда 
			стр1.Продавец = ПродавецТовара(Стр.КодПродавца);
		КонецЕсли ;
		// Поле склад  
		Попытка 
			стр1.Склад   = стр.Склад;
		Исключение 
			
		КонецПопытки ;
		
		Попытка 
		// карты 
		Карта = НайтиКарту(стр.КодКлиента);
		Если Карта <> Неопределено Тогда 
			Стр1.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте ;
			Стр1.ЗначениеУсловияАвтоматическойСкидки =  Карта ;
			// если задано условие , 
			//то процент авт скидки не может быть равен 0 
		КонецЕсли ;			
		Исключение 
			
		КонецПопытки ;
		
		Если ВключатьИнфЧекВОтчет Тогда 
			
			стр1.ДатаВремя  = '00010101'+стр.ДатаВремя;
			стр1.НомерЧека  = стр.НомерЧека;
			
			Если Карта <> Неопределено Тогда 
				стр1.Покупатель = Карта.ВладелецКарты ;
			КонецЕсли ;	
		КонецЕсли ;	
		// ЧТОБЫ работало проведение отчетов с нулевой ценой и суммой 
		// нужно установить доп права текущего пользователя :
		// нулевые цены в розничной торговле 
		
		////нельзя делать сумму = 0		
		//  Если стр1.Сумма = 0 Тогда    
		//  	стр1.Сумма = 0.01;
		//  КонецЕсли;	
		// учитываем % скидки , наценки 
		СуммаБезСкидки = стр.Цена*стр.Количество;
		
		Если СуммаБезСкидки <>стр1.Сумма Тогда 
			Если СуммаБезСкидки <> 0  Тогда
				ПроцентСкидкиНаценки = (1 - Стр.Сумма/СуммаБезСкидки )*100;
				Если Не стр1.УсловиеАвтоматическойСкидки.пустая() Тогда
					стр1.ПроцентАвтоматическихСкидок = ПроцентСкидкиНаценки ;		
				Иначе
					стр1.ПроцентСкидкиНаценки = ПроцентСкидкиНаценки ;		
				КонецЕсли ;
				
			КонецЕсли ;	
			
		Иначе
			стр1.ПроцентАвтоматическихСкидок = 0 ;		
		КонецЕсли;
		
		Если стр1.ПроцентАвтоматическихСкидок = 0  Тогда 		
			стр1.УсловиеАвтоматическойСкидки = Неопределено ;
			Стр1.ЗначениеУсловияАвтоматическойСкидки =  Неопределено ;
		КонецЕсли ;
		
		
	КонецЦикла;
	Табл.ЗаполнитьЗначения (1,"Коэффициент");
	Табл.ЗаполнитьЗначения (Справочники.Качество.Новый,"Качество");
	
КонецПРоцедуры
Функция ТЧТоварыДокВнутреннийЗаказПТУ(ВремТовары)
	ФильтрПоНулевым = Новый Структура;
	ФильтрПоНулевым.Вставить("Количество",0);
	ФильтрПоНулевым.Вставить("Сумма",0);
	
	Пустые = ВремТовары.НайтиСтроки(ФильтрПоНулевым);
	Для каждого стр из Пустые Цикл 
		ВремТовары.Удалить(стр);	
	КонецЦикла ;	
	
	Если ВремТовары.Количество()=0 ТОгда 
		Возврат Новый ТаблицаЗначений ;
	КонецЕсли ;	
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Количество");
	Товары.Колонки.Добавить("Номенклатура");
	Товары.Колонки.Добавить("Цена");
	Товары.Колонки.Добавить("ЕдиницаИзмерения");
	Товары.Колонки.Добавить("ЕдиницаИзмеренияМест");
	Товары.Колонки.Добавить("Качество");
	Товары.Колонки.Добавить("КоличествоМест");
	Товары.Колонки.Добавить("Коэффициент");
	Товары.Колонки.Добавить("Сумма");
	
	Для каждого стр из ВремТовары Цикл 
		Номенклатура = СправочникНоменклатура(стр.код);			
		Если Номенклатура = Неопределено Тогда 
			Сообщить("Не найдена номенклатура по коду "+ стр.Код);
			стр1 = Товары.Добавить();
		Иначе
			Если Номенклатура.ЭтоГруппа Тогда 
				Сообщить("Номеклатура является группой : код "+ стр.Код);
				Номенклатура = Справочники.Номенклатура.ПустаяСсылка();			
			КонецЕсли ;
			стр1 = Товары.Добавить();
			стр1.Номенклатура  = Номенклатура;
			стр1.ЕдиницаИзмерения  = Номенклатура.ЕдиницаХраненияОстатков;
			стр1.ЕдиницаИзмеренияМест  = Номенклатура.ЕдиницаХраненияОстатков;
		КонецЕсли;	
		стр1.Количество = стр.Количество;
		стр1.КоличествоМест = стр.Количество;
		//стр1.Сумма = стр.Сумма;
		//стр1.Цена = стр.Цена;
		стр1.Сумма = 0;
		стр1.Цена = 0;
	КонецЦикла;
	Товары.ЗаполнитьЗначения (1,"Коэффициент");
	Товары.ЗаполнитьЗначения (Справочники.Качество.Новый,"Качество");
	Возврат Товары ;
	
КонецФункции
//////////////////////////////////////////////////////////////
Функция ПроцентСкидкиПоДокументу(ВремТовары)
	СуммаБезСкидки  = 0 ;
	Для каждого стр из ВремТовары Цикл 
		СуммаБезСкидки = СуммаБезСкидки + стр.Количество*Стр.Цена;
	КонецЦикла;	
	СуммаСоСкидкой = ВремТовары.Итог("Сумма");	
	ПроцентСкидки = Цел(1-СуммаСоСКидкой/СуммаБезСКидки)*100;
	Возврат ПроцентСкидки;	
КонецФункции
//////////////////////////////////////////////////////////////
Функция ВладелецКарты(Организация,Код)
	К = Справочники.Контрагенты;
	
	НовыйОбъект = К.СоздатьЭлемент();
	//овыйОбъект.Код = Код;
	НовыйОбъект.Наименование  = "Карта "+ Строка(Код);
	НовыйОбъект.НаименованиеПолное  = "Карта "+ Строка(Код);
	НовыйОбъект.Родитель = ГруппаКонтрагентовДисконтныеКарты;
	НовыйОбъект.ЮрФизЛицо =  Перечисления.ЮрФизЛицо.ФизЛицо ;
	НовыйОбъект.Покупатель = Истина;
	НовыйОбъект.Записать();
	
	Дог = Справочники.ДоговорыКонтрагентов;
	ОбъектДог = Дог.СоздатьЭлемент();
	ОбъектДог.Владелец = НовыйОбъект.Ссылка;
	ОбъектДог.Организация    = Организация;
	ОбъектДог.Наименование 	 = "Основной";
	ОбъектДог.ВидДоговора 	 = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем; 
	ОбъектДог.ВалютаВзаиморасчетов = константы.ВалютаРегламентированногоУчета.Получить(); 
	ОбъектДог.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом; 
	ОбъектДог.Записать();	
	НовыйОбъект.ОсновнойДоговорКонтрагента = ОбъектДог.Ссылка;
	НовыйОбъект.Записать();
	Возврат НовыйОбъект.Ссылка;
КонецФункции
//////////////////////////////////////////////////////////////
Функция НайтиВидДисконтнойКарты(КодКарты,КонтрагентХозяин)
	
	Ответ = ВидКартыПоУмолчанию ;
	Для каждого стр из ФормированиеКарт Цикл 
		Если КодКарты >= стр.КодНачальный И
			
			КодКарты <= стр.КодКонечный Тогда 
			КонтрагентХозяин = стр.ХозяинКарты ;
			
			Ответ = стр.ВидКарты ;
			
			Прервать ;
		КонецЕсли ;	
		
	КонецЦикла ;
	
	Возврат Ответ ;
	
КонецФункции
//////////////////////////////////////////////////////////////
Функция НоваяДисконтнаяКарта(Организация,КодКарты,ПроцентСкидки)
	
	Контрагент = ВладелецКарты(Организация,КодКарты);
	КонтрагентХозяин = справочники.Контрагенты.ПустаяСсылка() ;
	
	ДК = Справочники.ИнформационныеКарты;
	НовыйОбъект = ДК.СоздатьЭлемент();
	НовыйОбъект.ВладелецКарты = Контрагент;
	НовыйОбъект.КодКарты = КодКарты;
	НовыйОбъект.Наименование  = "Карта "+ Строка(КодКарты);
	НовыйОбъект.ВидДисконтнойКарты = НайтиВидДисконтнойКарты(КодКарты,КонтрагентХозяин);
	НовыйОбъект.ТипКарты = Перечисления.ТипыИнформационныхКарт.Дисконтная;
	НовыйОбъект.Записать();
	
	Если Не КонтрагентХозяин.Пустая() Тогда 
		мз = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
		//		мз.Прочитать();
		мз.Объект = Контрагент ;
		мз.Свойство =  СвойствоХозяинКарты ;
		мз.Значение =  КонтрагентХозяин ;
		мз.Записать();
	КонецЕсли ;
	
	Возврат НовыйОбъект.Ссылка;
КонецФункции

// заполнение контрагента по документу 
// формировние дисконтной карты если это необходимо 
Функция НайтиКарту(КодКарты)
	рез = Неопределено;
	Если КодКарты <> "-1" Тогда
		
		Запрос = Новый Запрос ;
		Запрос.УстановитьПараметр("КодКарты","%"+КодКарты+"%");
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнформационныеКарты.Ссылка
		|ИЗ
		|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
		|ГДЕ
		|	ИнформационныеКарты.КодКарты ПОДОБНО &КодКарты" 
		;
		Результат =  Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			рез = Выборка.Ссылка ;
		КонецЕсли; 	
	КонецЕсли; 	
	
	Возврат рез;
КонецФункции 

Процедура ЗаполнитьДанныеПоПокупателю(Данные)
	КодКарты = Данные.КодКлиента ;
	Данные.Контрагент = КонтрагентПоУмолчанию ;
	Если КодКарты <>"-1"  Тогда 
		Если Лев(КодКарты,3) ="999"  Тогда 
			Данные.Контрагент =  Справочники.Контрагенты.НайтиПоКоду(Сред(КодКарты,4,9));
		Иначе
			
			ДисконтнаяКарта = Справочники.ИнформационныеКарты.ПустаяСсылка();
			ДисконтнаяКарта = НайтиКарту(КодКарты);
			Если Не ЗначениеЗаполнено(ДисконтнаяКарта) Тогда 
				ДисконтнаяКарта = НоваяДисконтнаяКарта(Данные.КассаККМ.Владелец,КодКарты,0);
			КонецЕсли;	
			
			Если Не ДисконтнаяКарта.Пустая() Тогда 
				Данные.Контрагент =  ДисконтнаяКарта.ВладелецКарты;
				Данные.ДисконтнаяКарта =  ДисконтнаяКарта;
			КонецЕсли;	
		КонецЕсли ;	
	КонецЕсли ;	
КонецПроцедуры 			

Процедура ЗаполнитьДанныеПоОплатеБонусами(ДанныеДокумента,ОплатаБонусами)
	
	Отбор = Новый Структура ("НомерККМ,НомерОтчёта");
	ЗаполнитьЗначенияСвойств(Отбор,ДанныеДокумента);
	
	ОплатаБонусамиВДокументе = Новый ТаблицаЗначений ;
	ОплатаБонусамиВДокументе.Колонки.Добавить("КодКлиента");
	ОплатаБонусамиВДокументе.Колонки.Добавить("ДисконтнаяКарта");
	ОплатаБонусамиВДокументе.Колонки.Добавить("Контрагент");
	ОплатаБонусамиВДокументе.Колонки.Добавить("Сумма");
	ОплатаБонусамиВДокументе.Колонки.Добавить("КассаККМ");
	ОплатаБонусамиВДокументе.Колонки.Добавить("НомерККМ");
	
	строки = ОплатаБонусами.НайтиСтроки(Отбор);
	
	Для каждого стр из строки Цикл 
		стрО = ОплатаБонусамиВДокументе.Добавить();
		ЗаполнитьЗначенияСвойств(стрО,стр);
		ЗаполнитьДанныеПоПокупателю(стрО);
	КонецЦикла ;	
	
	ДанныеДокумента.ОплатаБонусами = ОплатаБонусамиВДокументе ;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////
Процедура ЗагрузитьФайлПродаж(Каталог,ИмяФайла,ОперативныйДокумент=Ложь)
	
	Перем тзДок;	
	Перем тзЗаказы;	
	Перем тзКредиты;
	Перем ОплатаБонусами;
	
	// Дата и КодСклада	
	СтрДок = СтруктураИзИмениФайла(ИмяФайла);
	ЗаписьЖурналаРегистрации("ПриемОтчетовККМ.ОбработкаФайла",УровеньЖурналаРегистрации.Информация,,,Каталог + ИмяФайла);
	
	КраткоеИмя = Каталог + "\t.dbf";
	КопироватьФайл(Каталог+"\"+ИмяФайла,КраткоеИмя);
	
	Если СформироватьТаблицыДокументовПродажа(КраткоеИмя,ТзДок,тзКредиты,ОплатаБонусами) Тогда 
		
		ТзДок.Колонки.Добавить("Товары");
		ТзДок.Колонки.Добавить("Услуги");
		ТзДок.Колонки.Добавить("ИмяФайла");
		ТзДок.Колонки.Добавить("Дата");
		тзДок.Колонки.Добавить("Склад");
		тзДок.Колонки.Добавить("ОплатаБонусами");
		
		ТзДок.ЗаполнитьЗначения(ИмяФайла,"ИмяФайла");
		ТзДок.ЗаполнитьЗначения(стрДок.Дата,"Дата");
		
		тзКредиты.Колонки.Добавить("Дата");
		тзКредиты.Колонки.Добавить("ИмяФайла");
		тзКредиты.ЗаполнитьЗначения(ИмяФайла,"ИмяФайла");
		тзКредиты.ЗаполнитьЗначения(стрДок.Дата,"Дата");
		
		Для каждого стр из ТзДок 	Цикл
			ЗаполнитьДанныеПоПокупателю(стр);
			СформироватьТЧДок(стр.ВремТовары,стр.Товары,стр.Услуги) ;
		КонецЦикла; 
		
		// Может получиться больше документов чем файлов отчетов
		
		Для каждого стр из ТзДок 	Цикл
			тест = стр.Товары.Скопировать(,"Склад,Сумма");
			Тест.Свернуть("Склад","Сумма");
			Если Тест.Количество() =1 Тогда 
				стр.Склад = Тест[0].Склад ;
				колонкаСклад = стр.Товары.Колонки.Найти("Склад");
				Если колонкаСклад <>  Неопределено  Тогда 
					стр.Товары.Колонки.Удалить(колонкаСклад);		
				КонецЕсли ;
			КонецЕсли ;	
			
			ЗаполнитьДанныеПоОплатеБонусами(стр,ОплатаБонусами);
			СформироватьДокументПродажа(стр,ОперативныйДокумент);
			
		КонецЦикла; 
		
		Если Не ОперативныйДокумент Тогда 		
			Если  КредитнаяИстория Тогда 
				Для каждого стр из тзКредиты 	Цикл
					СформироватьДокументКредитнаяИстория(стр);
				КонецЦикла; 
			КонецЕсли ;
			
		КонецЕсли ;
		
	КонецЕсли;
	
	Попытка 
		УдалитьФайлы(каталог +"\"+ ИмяФайла);
	Исключение 
		
	КонецПопытки ;
	
	УдалитьФайлы(КраткоеИмя); //!!!!
КонецПроцедуры
//////////////////////////////////////////////////////////////
Процедура ЗагрузитьФайлИнв(Каталог,ИмяФайла)
	Перем тзДок;	
	// Дата и КодСклада	
	СтрДок = СтруктураИзИмениФайла(ИмяФайла);
	ЗаписьЖурналаРегистрации("ПриемОтчетовККМ.ОбработкаФайла.Инвентаризация",УровеньЖурналаРегистрации.Информация,,,Каталог + ИмяФайла);
	
	КраткоеИмя = Каталог + "\"+"t.dbf";
	КопироватьФайл(Каталог+"\"+ИмяФайла,КраткоеИмя);
	Если СформироватьТаблицыДокументовИнв(КраткоеИмя,ТзДок) Тогда 
		
		ТзДок.Колонки.Добавить("Товары");
		ТзДок.Колонки.Добавить("Услуги");
		ТзДок.Колонки.Добавить("ИмяФайла");
		ТзДок.Колонки.Добавить("Дата");
		ТзДок.ЗаполнитьЗначения(ИмяФайла,"ИмяФайла");
		ТзДок.ЗаполнитьЗначения(стрДок.Дата,"Дата");
		
		Для каждого стр из ТзДок 	Цикл
			СформироватьТЧДок(стр.ВремТовары,стр.Товары,стр.Услуги) ;
			стр.Товары.ЗаполнитьЗначения(стр.Склад,"Склад");
			СформироватьДокументИнв(стр);
		КонецЦикла; 
	КонецЕсли;
	УдалитьФайлы(каталог +"\"+ ИмяФайла);
	УдалитьФайлы(КраткоеИмя); //!!!!
КонецПроцедуры

Процедура ЗагрузитьФайлИнвСервер(Каталог,ИмяФайла)
	Перем тзДок;	
	// Дата и КодСклада	
	СтрДок = СтруктураИзИмениФайла(ИмяФайла);
	ЗаписьЖурналаРегистрации("ПриемОтчетовККМ.ОбработкаФайла.ИнвентаризацияСервер",УровеньЖурналаРегистрации.Информация,,,Каталог + ИмяФайла);
	
	КраткоеИмя = Каталог +"\"+ "t.dbf";
	КопироватьФайл(Каталог+"\"+ИмяФайла,КраткоеИмя);
	Если СформироватьТаблицыДокументовИнвСервер(КраткоеИмя,ТзДок) Тогда 
		
		ТзДок.Колонки.Добавить("Товары");
		ТзДок.Колонки.Добавить("Услуги");
		ТзДок.Колонки.Добавить("ИмяФайла");
		ТзДок.Колонки.Добавить("Дата");
		ТзДок.ЗаполнитьЗначения(ИмяФайла,"ИмяФайла");
		ТзДок.ЗаполнитьЗначения(стрДок.Дата,"Дата");
		КодПоиска = Формат(Число(стрДок.КодСклада),"ЧЦ=9; ЧВН=; ЧГ=0");
		Склад = СправочникСсылка(КодПоиска,"Склады","Код");		
		ТзДок.ЗаполнитьЗначения(Склад,"Склад");
		
		Для каждого стр из ТзДок 	Цикл
			СформироватьТЧДок(стр.ВремТовары,стр.Товары,стр.Услуги) ;
			СформироватьДокументИнв(стр);
		КонецЦикла; 
	КонецЕсли;
	УдалитьФайлы(каталог +"\"+ ИмяФайла);
	УдалитьФайлы(КраткоеИмя); //!!!!
КонецПроцедуры

//////////////////////////////////////////////////////////////
Процедура ЗагрузитьФайлЗаявки(Каталог,ИмяФайла)
	Перем тзДок,тзДанныеПоТоварам;	
	// Дата и КодСклада	
	СтрДок = СтруктураИзИмениФайла(ИмяФайла);
	Склад = Справочники.Склады.ПустаяСсылка();
	Если СтрДок.КодСклада <>"" Тогда 
		КодСклада = Формат(Число(СтрДок.КодСклада),"ЧЦ=9; ЧВН=; ЧГ=0");
		Склад = Справочники.Склады.НайтиПоКоду(КодСклада);
	КонецЕсли ;
	
	ЗаписьЖурналаРегистрации("ПриемОтчетовККМ.ОбработкаФайла.Заявки",УровеньЖурналаРегистрации.Информация,,,Каталог + ИмяФайла);
	
	КраткоеИмя = Каталог + "\"+"t.dbf";
	КопироватьФайл(Каталог+"\"+ИмяФайла,КраткоеИмя);
	Если СформироватьТаблицыДокументовВнутреннийЗаказПТУ(КраткоеИмя,тзДанныеПоТоварам) Тогда 
		тзДок = Новый ТаблицаЗначений ;
		ТзДок.Колонки.Добавить("Товары");
		ТзДок.Колонки.Добавить("ИмяФайла");
		ТзДок.Колонки.Добавить("Дата");
		ТзДок.Колонки.Добавить("Склад");
		ТзДок.Колонки.Добавить("Организация");
		ТзДок.Колонки.Добавить("КассаККМ");
		Для каждого стрТЧ из тзДанныеПоТоварам цикл
			стр = тзДок.Добавить();
			стр.Товары = ТЧТоварыДокВнутреннийЗаказПТУ(стрТЧ.ВремТовары) ;
			ЗаполнитьЗначенияСвойств(стр,стрТЧ);
		КонецЦикла ;	
		
		ТзДок.ЗаполнитьЗначения(ИмяФайла,"ИмяФайла");
		ТзДок.ЗаполнитьЗначения(стрДок.Дата,"Дата");
		
		Для каждого стр из ТзДок 	Цикл
			СформироватьДокументВнутреннийЗаказ(стр);
		КонецЦикла; 
		
	КонецЕсли;
	УдалитьФайлы(каталог +"\"+ ИмяФайла);
	УдалитьФайлы(КраткоеИмя); 
КонецПроцедуры

//////////////////////////////////////////////////////////////
Процедура ЗагрузитьФайлПрихода(Каталог,ИмяФайла)
	Перем тзДок,тзДанныеПоТоварам;	
	// Дата и КодСклада	
	СтрДок = СтруктураИзИмениФайла(ИмяФайла);
	Склад = Справочники.Склады.ПустаяСсылка();
	Если СтрДок.КодСклада <>"" Тогда 
		КодСклада = Формат(Число(СтрДок.КодСклада),"ЧЦ=9; ЧВН=; ЧГ=0");
		Склад = Справочники.Склады.НайтиПоКоду(КодСклада);
	КонецЕсли ;
	
	ЗаписьЖурналаРегистрации("ПриемОтчетовККМ.ОбработкаФайла.Приход",УровеньЖурналаРегистрации.Информация,,,Каталог + ИмяФайла);
	
	КраткоеИмя = Каталог +"\"+ "t.dbf";
	КопироватьФайл(Каталог+"\"+ИмяФайла,КраткоеИмя);
	Если СформироватьТаблицыДокументовПТУ(КраткоеИмя,тзДанныеПоТоварам) Тогда 
		тзДок = Новый ТаблицаЗначений ;
		ТзДок.Колонки.Добавить("Товары");
		ТзДок.Колонки.Добавить("ИмяФайла");
		ТзДок.Колонки.Добавить("Дата");
		ТзДок.Колонки.Добавить("Склад");
		ТзДок.Колонки.Добавить("КассаККМ");
		ТзДок.Колонки.Добавить("Организация");
		Для каждого стрТЧ из тзДанныеПоТоварам цикл
			стр = тзДок.Добавить();
			стр.Товары = ТЧТоварыДокВнутреннийЗаказПТУ(стрТЧ.ВремТовары) ;
			ЗаполнитьЗначенияСвойств(стр,стрТЧ);
		КонецЦикла ;	
		ТзДок.ЗаполнитьЗначения(ИмяФайла,"ИмяФайла");
		ТзДок.ЗаполнитьЗначения(стрДок.Дата,"Дата");
		
		Для каждого стр из ТзДок 	Цикл
			СформироватьДокументПТУ(стр);
		КонецЦикла; 
	КонецЕсли;
	УдалитьФайлы(каталог +"\"+ ИмяФайла);
	УдалитьФайлы(КраткоеИмя); 
КонецПроцедуры

//////////////////////////////////////////////////////////////
Функция НайтиККМ(НомерККМ)
	Запрос = Новый Запрос ;
	Запрос.УстановитьПараметр("НомерККМ","%"+НомерККМ+"%");
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КассыККМ.Ссылка
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.Наименование ПОДОБНО &НомерККМ" 
	;
	рез = Справочники.КассыККМ.ПустаяСсылка();
	Результат =  Запрос.Выполнить();
	Если Не РЕзультат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		рез = Выборка.Ссылка ;
	Иначе 
		Сообщить("Касса не найдена , заводской номер не встретился в наименовании : " + НомерККМ );
	КонецЕсли; 	
	
	Возврат рез;
КонецФункции 
//////////////////////////////////////////////////////////////
Функция ФайлБылПринят(ВидДокумента,ИмяФайла)
	Запрос = Новый Запрос ;
	Запрос.УстановитьПараметр("ИмяФайла","%"+ИмяФайла+"%");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Док.Ссылка 
	|ИЗ
	|	Документ.ВидДокумента КАК Док
	|ГДЕ Комментарий ПОДОБНО &ИмяФайла" 
	;
	Запрос.Текст =СтрЗаменить(Запрос.Текст,"ВидДокумента",ВидДокумента);
	рез  =  Запрос.Выполнить() ;
	
	СсылкаНаДокументДубликат = Неопределено ;
	ЕстьДокумент = НЕ  рез.Пустой() ;
	Если ЕстьДокумент Тогда
		Выборка = рез.Выбрать();
		Выборка.следующий();
		СсылкаНаДокументДубликат = ВЫборка.ссылка ; 
	КонецЕсли ;
	
	Возврат ЕстьДокумент;
	
КонецФункции 	
// Для анализа принимаем файл или нет 
Функция ИмяФайлаНеСоответствуетФормату(ИмяФайла)
	Отказ = (СтрЧислоВхождений(ИмяФайла,"_")>3)ИЛИ(СтрЧислоВхождений(ИмяФайла,"_")<2) ;
	Если Отказ  Тогда
		ТекстИнформации = ИмяФайла + " :: Файл не может быть обработан и пропущен "+Символы.ПС + "Несоответствие формату имени файла" ;
		ЗаписьЖурналаРегистрации("ПриемОтчетовККМ.ОбработкаФайла.ОтчетККМ.ОшибкаПриема",УровеньЖурналаРегистрации.Ошибка,,,"\"+ИмяФайла+" "+ТекстИнформации);
		Сообщить(ТекстИнформации );
	КонецЕсли; 
	Возврат Отказ ;	
	
КонецФункции 
//////////////////////////////////////////////////////////////
Процедура ПринятьИнвентаризации(Каталог,КатАрх)
	
	СписокОтчетов = НайтиФайлы(Каталог,"\inz_*.dbf");
	Если СписокОтчетов.Количество()>0 Тогда
		Для Каждого Отчет Из СписокОтчетов Цикл						
			// нашли файлы инвентаризации
			ИмяФайла = Отчет.Имя;
			Сообщить(ИмяФайла);
			Если ИмяФайлаНеСоответствуетФормату(ИмяФайла) Тогда 
				продолжить;
			КонецЕсли; 
			
			ВидДокумента = "ИнвентаризацияТоваровНаСкладе";
			Если ФайлБылПринят(ВидДокумента,ИмяФайла) Тогда 
				
				ПереместитьФайл(СокрЛП(Каталог)+"\"+ИмяФайла,СокрЛП(КатАрх) + "\" + ИмяФайла);
				
				ТекстИнформации = "Инвентаризация : Файл уже был принят ";
				ЗаписьЖурналаРегистрации("ПриемОтчетовККМ.ОбработкаФайла.Инвентаризация.ФайлБылПринят",УровеньЖурналаРегистрации.Информация,,,ИмяФайла);
				Сообщить(ТекстИнформации,статусСообщения.ОченьВажное);
				Продолжить;
			КонецЕсли ;	
			Попытка
				ЗагрузитьФайлИнв(Каталог,ИмяФайла) ;
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				Сообщить(ТекстОшибки,статусСообщения.ОченьВажное);
				ЗаписьЖурналаРегистрации("ПриемОтчетовККМ.ОбработкаФайла.Инвентаризация.ОшибкаПриема",УровеньЖурналаРегистрации.Ошибка,,,Каталог+"\"+ИмяФайла+" "+ТекстОшибки);
			КонецПопытки; 
		КонецЦикла;	
	Иначе 
		// Не нашли файлы 
		//Сообщить ("отчетов по инвентаризациям нет ");	
	КонецЕсли;	
КонецПроцедуры	

Процедура ПринятьИнвентаризацииСервер(Каталог,КатАрх)
	Перем ссылкаНаДокумент ;
	
	СписокОтчетов = НайтиФайлы(Каталог,"\inv_*.dbf");
	Если СписокОтчетов.Количество()>0 Тогда
		Для Каждого Отчет Из СписокОтчетов Цикл						
			// нашли файлы инвентаризации
			ИмяФайла = Отчет.Имя;
			Сообщить(ИмяФайла);
			Если ИмяФайлаНеСоответствуетФормату(ИмяФайла) Тогда 
				продолжить;
			КонецЕсли; 
			
			ВидДокумента = "ИнвентаризацияТоваровНаСкладе";
			Если ФайлБылПринят(ВидДокумента,ИмяФайла) Тогда 
				
				ПереместитьФайл(СокрЛП(Каталог)+"\"+ИмяФайла,СокрЛП(КатАрх) + "\" + ИмяФайла);
				
				ТекстИнформации = "Инвентаризация : Файл уже был принят ";
				ЗаписьЖурналаРегистрации("ПриемОтчетовККМ.ОбработкаФайла.ИнвентаризацияСервер.ФайлБылПринят",УровеньЖурналаРегистрации.Информация,,,ИмяФайла);
				Сообщить(ТекстИнформации,статусСообщения.ОченьВажное);
				Продолжить;
			КонецЕсли ;	
			Попытка
				ЗагрузитьФайлИнвСервер(Каталог,ИмяФайла) ;
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				Сообщить(ТекстОшибки,статусСообщения.ОченьВажное);
				ЗаписьЖурналаРегистрации("ПриемОтчетовККМ.ОбработкаФайла.ИнвентаризацияСервер.ОшибкаПриема",УровеньЖурналаРегистрации.Ошибка,,,Каталог+"\"+ИмяФайла+" "+ТекстОшибки);
			КонецПопытки; 
		КонецЦикла;	
	Иначе 
		// Не нашли файлы 
		//Сообщить ("отчетов по инвентаризациям нет ");	
	КонецЕсли;	
КонецПроцедуры	
////////////////////////////////////////////////////
Процедура ПринятьОтчетыПоПродажам(ЭтоРозничныйСклад,Каталог,КатАрх)
	
	СписокОтчетов = НайтиФайлы(Каталог,"\rep_*.dbf");
	Если СписокОтчетов.Количество()>0 Тогда
		Для Каждого Отчет Из СписокОтчетов Цикл						
			// нашли файлы продаж 
			ИмяФайла = Отчет.Имя;
			Сообщить(ИмяФайла);
			Если ИмяФайлаНеСоответствуетФормату(ИмяФайла) Тогда 
				продолжить;
			КонецЕсли; 
			
			// Потому что отчет можно приянть по разному 
			// Делаем Анализ Разных видов докуента 
			
			ВидДокумента = "ОтчетОРозничныхПродажах";
			Если ФайлБылПринят("ОтчетОРозничныхПродажах",ИмяФайла) Тогда 
				УдалитьОперативныеДокументы(СсылкаНаДокументДубликат);
				ПереместитьФайл(СокрЛП(Каталог)+"\"+ИмяФайла,СокрЛП(КатАрх) + "\" + ИмяФайла);
				
				ТекстИнформации = "Файл уже был принят ранее " + ИмяФайла + " как ""Отчет о розничных продажах""";
				Сообщить(ТекстИнформации,статусСообщения.ОченьВажное);
				ЗаписьЖурналаРегистрации("ПриемОтчетовККМ.ОбработкаФайла.ОтчетККМ.ОшибкаПриема",УровеньЖурналаРегистрации.Ошибка,,,"\"+ИмяФайла+" "+ТекстИнформации);
				Продолжить;
			КонецЕсли ;	
			
			ВидДокумента = "РеализацияТоваровУслуг";
			Если ФайлБылПринят(ВидДокумента,ИмяФайла) Тогда 
				УдалитьОперативныеДокументы(СсылкаНаДокументДубликат);
				ПереместитьФайл(СокрЛП(Каталог)+"\"+ИмяФайла,СокрЛП(КатАрх) + "\" + ИмяФайла);
				
				ТекстИнформации = "Файл уже был принят ранее " + ИмяФайла + " как ""Реализация товаров и услуг """;
				Сообщить(ТекстИнформации,статусСообщения.ОченьВажное);
				ЗаписьЖурналаРегистрации("ПриемОтчетовККМ.ОбработкаФайла.ОтчетККМ.ОшибкаПриема",УровеньЖурналаРегистрации.Ошибка,,,"\"+ИмяФайла+" "+ТекстИнформации);
				Продолжить;
			КонецЕсли ;	
			
			Попытка
				ЗагрузитьФайлПродаж(Каталог,ИмяФайла) ;
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				Сообщить(ТекстОшибки,статусСообщения.ОченьВажное);
				ЗаписьЖурналаРегистрации("ПриемОтчетовККМ.ОбработкаФайла.ОтчетККМ.ОшибкаПриема",УровеньЖурналаРегистрации.Ошибка,,,"\"+ИмяФайла+" "+ТекстИнформации);
			КонецПопытки; 
		КонецЦикла;	
	Иначе 
		// Не нашли файлы 
		// бывает нет отчетов в архиве 
		Сообщить ("отчета по продажам нет ");	
	КонецЕсли;	
	
КонецПроцедуры	

////////////////////////////////////////////////////
Процедура ПринятьОперативныеОтчетыПоПродажам(ЭтоРозничныйСклад,Каталог,КатАрх)
	СписокОтчетов = НайтиФайлы(Каталог,"\xrp_*.dbf");
	Для Каждого Отчет Из СписокОтчетов Цикл						
		// нашли файлы  
		ИмяФайла = Отчет.Имя;
		Сообщить(ИмяФайла);
		Если ИмяФайлаНеСоответствуетФормату(ИмяФайла) Тогда 
			продолжить;
		КонецЕсли; 
		
		ВидДокумента = "ОтчетОРозничныхПродажах";
		Если ФайлБылПринят("ОтчетОРозничныхПродажах",ИмяФайла) Тогда 
			
			//				ПереместитьФайл(СокрЛП(Каталог)+"\"+ИмяФайла,СокрЛП(КатАрх) + "\" + ИмяФайла);
			ИмяДляУдаления = СокрЛП(Каталог)+"\"+ИмяФайла ;
			
			УдалитьФайлы(ИмяДляУдаления);
			Если НайтиФайлы(ИмяДляУдаления).Количество() = 1 Тогда 
				Сообщить(" Не удален "+ИмяДляУдаления);	
			КонецЕсли ;
			
			ТекстИнформации = "Файл уже был принят ранее " + ИмяФайла + " как ""Чек ККМ""";
			Сообщить(ТекстИнформации,статусСообщения.ОченьВажное);
			ЗаписьЖурналаРегистрации("ПриемОтчетовККМ.ОбработкаФайла.ЧекККМ.ОшибкаПриема",УровеньЖурналаРегистрации.Ошибка,,,"\"+ИмяФайла+" "+ТекстИнформации);
			Продолжить;
		КонецЕсли ;	
		
		
		Попытка
			ЗагрузитьФайлПродаж(Каталог,ИмяФайла,Истина) ;
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Сообщить(ТекстОшибки,статусСообщения.ОченьВажное);
			ЗаписьЖурналаРегистрации("ПриемОтчетовККМ.ОбработкаФайла.ЧекККМ.ОшибкаПриема",УровеньЖурналаРегистрации.Ошибка,,,"\"+ИмяФайла+" "+ТекстИнформации);
		КонецПопытки; 
	КонецЦикла;	
	
КонецПроцедуры	

////////////////////////////////////////////////////
Процедура ПринятьЗаявки(Каталог,КатАрх)
	СписокОтчетов = НайтиФайлы(Каталог,"\req_*.dbf");
	Если СписокОтчетов.Количество()>0 Тогда
		Для Каждого Отчет Из СписокОтчетов Цикл						
			// нашли файлы продаж 
			ИмяФайла = Отчет.Имя;
			Сообщить(ИмяФайла);
			Если ИмяФайлаНеСоответствуетФормату(ИмяФайла) Тогда 
				продолжить;
			КонецЕсли; 
			
			ВидДокумента = "ВнутреннийЗаказ";
			Если ФайлБылПринят(ВидДокумента,ИмяФайла) Тогда 
				
				ПереместитьФайл(СокрЛП(Каталог)+"\"+ИмяФайла,СокрЛП(КатАрх) + "\" + ИмяФайла);
				
				ТекстИнформации = "Заявка на склад : Файл уже был принят ";
				Сообщить(ТекстИнформации,статусСообщения.ОченьВажное);
				ЗаписьЖурналаРегистрации("ПриемОтчетовККМ.ОбработкаФайла.Заявки.ОшибкаПриема",УровеньЖурналаРегистрации.Ошибка,,,"\"+ИмяФайла+" "+ТекстИнформации);
				
				Продолжить;
			КонецЕсли ;	
			Попытка
				ЗагрузитьФайлЗаявки(Каталог,ИмяФайла) ;
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				Сообщить(ТекстОшибки,статусСообщения.ОченьВажное);
				ЗаписьЖурналаРегистрации("ПриемОтчетовККМ.ОбработкаФайла.ОтчетККМ.ОшибкаПриема",УровеньЖурналаРегистрации.Ошибка,,,"\"+ИмяФайла+" "+ТекстИнформации);
			КонецПопытки; 
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры	

////////////////////////////////////////////////////
Процедура ПринятьПриходы(Каталог,КатАрх)
	СписокОтчетов = НайтиФайлы(Каталог,"\arr_*.dbf");
	Если СписокОтчетов.Количество()>0 Тогда
		Для Каждого Отчет Из СписокОтчетов Цикл						
			// нашли файлы продаж 
			ИмяФайла = Отчет.Имя;
			Сообщить(ИмяФайла);
			Если ИмяФайлаНеСоответствуетФормату(ИмяФайла) Тогда 
				продолжить;
			КонецЕсли; 
			
			ВидДокумента = "ПоступлениеТоваровУслуг";
			Если ФайлБылПринят(ВидДокумента,ИмяФайла) Тогда 
				
				ПереместитьФайл(СокрЛП(Каталог)+"\"+ИмяФайла,СокрЛП(КатАрх) + "\" + ИмяФайла);
				
				ТекстИнформации = "Заявка на склад : Файл уже был принят ";
				Сообщить(ТекстИнформации,статусСообщения.ОченьВажное);
				ЗаписьЖурналаРегистрации("ПриемОтчетовККМ.ОбработкаФайла.Заявки.ОшибкаПриема",УровеньЖурналаРегистрации.Ошибка,,,"\"+ИмяФайла+" "+ТекстИнформации);
				
				Продолжить;
			КонецЕсли ;	
			Попытка
				ЗагрузитьФайлПрихода(Каталог,ИмяФайла) ;
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				Сообщить(ТекстОшибки,статусСообщения.ОченьВажное);
				ЗаписьЖурналаРегистрации("ПриемОтчетовККМ.ОбработкаФайла.ОтчетККМ.ОшибкаПриема",УровеньЖурналаРегистрации.Ошибка,,,"\"+ИмяФайла+" "+ТекстИнформации);
			КонецПопытки; 
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры	

//////////////////////////////////////////////////////////////
Процедура ЗагрузитьДанныеТоргсервиса(НастройкаЗагрузки,ЭтоРозничныйСклад) 
	Каталог	= СокрЛП(НастройкаЗагрузки.Импорт);
	
	Если ОбработкаОперативныхОтчетов Тогда  // Принимаем первыми  
		
		КаталогОперативных = ?(ПустаяСтрока(НастройкаЗагрузки.КаталогОперативныхОтчетов),
		НастройкаЗагрузки.Импорт,
		НастройкаЗагрузки.КаталогОперативныхОтчетов );
		
		// Расапаковываем в тот же каталог  
		Маска = "\xrp_*.zip";
		СписокАрхивов	= НайтиФайлы(КаталогОперативных,Маска);
		
		Для Каждого Архив Из СписокАрхивов Цикл
			
			Попытка 	
				ИмяАрхива = Архив.ПолноеИмя;
				ЗипФайл  = Новый ЧтениеZipФайла(ИмяАрхива);
				ЗипФайл.ИзвлечьВсе(КаталогОперативных);
				ЗипФайл.Закрыть();
			Исключение 
				
			КонецПопытки ;
			УдалитьФайлы(Архив.ПолноеИмя);
		КонецЦикла;
		// Принимаем уже не запакованные 
		ПринятьОперативныеОтчетыПоПродажам(ЭтоРозничныйСклад,КаталогОперативных,НастройкаЗагрузки.Архив);
	КонецЕсли ;	
	
	// Обычные продажи 
	Маска = "\rep_*.zip";
	СписокАрхивов	= НайтиФайлы(Каталог,Маска);
	
	Если СписокАрхивов.Количество() = 0 Тогда 
		
		Если Не ОбработкаОперативныхОтчетов Тогда 
			Сообщить("В каталоге " + Каталог + " не обнаружены файлы " + Маска );		
		КонецЕсли ;
		
	КонецЕсли ;	
	
	Для Каждого Архив Из СписокАрхивов Цикл
		ИмяАрхива = Архив.ПолноеИмя;
		Попытка 
			ЗипФайл  = Новый ЧтениеZipФайла(ИмяАрхива);
			ЗипФайл.ИзвлечьВсе(Каталог);
			ЗипФайл.Закрыть();
		Исключение 
			
		КонецПопытки ;
		
		ПринятьОтчетыПоПродажам(ЭтоРозничныйСклад,Каталог,НастройкаЗагрузки.Архив);
		ПринятьИнвентаризации(Каталог,НастройкаЗагрузки.Архив);
		ПринятьИнвентаризацииСервер(Каталог,НастройкаЗагрузки.Архив);
		ПринятьЗаявки(Каталог,НастройкаЗагрузки.Архив);
		ПринятьПриходы(Каталог,НастройкаЗагрузки.Архив);
		
		УдалитьФайлы(Каталог,"cli_*.dbf");
		УдалитьФайлы(Каталог,"pay_*.dbf");
		УдалитьФайлы(Каталог,"prh_*.txt");
		УдалитьФайлы(Каталог,"rpt_*.txt");
		
		ИмяФайла = Архив.ПолноеИмя;
		ИмяБезПути = Архив.Имя;
		ПереместитьФайл(ИмяФайла,СокрЛП(НастройкаЗагрузки.Архив) + "\" + ИмяБезПути);
		Сообщить(ИмяБезПути + " перемещен в архив.");
	КонецЦикла;
	
	
КонецПроцедуры
// Функции для работы с почтой 
Функция ТемаСообщения(ИмяФайла)  
	ЧистоеИмяФайла=СокрЛП(ИмяФайла);
	ЧистоеИмяФайла = СтрЗаменить(ЧистоеИмяФайла,"/","\");
	поз = Найти(ЧистоеИмяФайла,"\");
	Пока поз >0 Цикл 
		ЧистоеИмяФайла = Прав(ЧистоеИмяФайла,СтрДлина(ЧистоеИмяФайла)-поз);
		поз = Найти(ЧистоеИмяФайла,"\");
	КонецЦикла ;	
	поз = Найти(ЧистоеИмяФайла,".");
	Если поз >0 тогда
		ЧистоеИмяФайла = Лев(ЧистоеИмяФайла,поз-1);
	КонецЕсли;	
	КодСклада = "";
	Если СтрЧислоВхождений(ЧистоеИмяФайла,"_")=3 Тогда
		поз = Найти(ЧистоеИмяФайла,"_");
		КодСклада= Прав(ЧистоеИмяФайла,СтрДлина(ЧистоеИмяФайла)-поз);
		поз = Найти(КодСклада,"_");
		КодСклада = Лев(КодСклада,поз-1);
	КонецЕсли;	
	Возврат "<"+КодСклада + ">"+ЧистоеИмяФайла;
КонецФункции	
//////////////////////////////////////////////
Функция ПрофильПочты()  
	ПочтовыйПрофиль = Новый ИнтернетПочтовыйПрофиль; 
	ПочтовыйПрофиль.АдресСервераSMTP   = УчетнаяЗаписьПочты.SMTPСервер; 
	ПочтовыйПрофиль.ПортSMTP           = УчетнаяЗаписьПочты.ПортSMTP; 
	ПочтовыйПрофиль.ПользовательSMTP   = УчетнаяЗаписьПочты.ЛогинSMTP; 
	ПочтовыйПрофиль.ПарольSMTP         = УчетнаяЗаписьПочты.ПарольSMTP; 
	ПочтовыйПрофиль.ВремяОжидания      = УчетнаяЗаписьПочты.ВремяОжиданияСервера; 
	ПочтовыйПрофиль.АдресСервераPOP3   = УчетнаяЗаписьПочты.POP3Сервер; 
	ПочтовыйПрофиль.ПортPOP3           = УчетнаяЗаписьПочты.ПортPOP3; 
	ПочтовыйПрофиль.Пользователь       = УчетнаяЗаписьПочты.Логин; 
	ПочтовыйПрофиль.Пароль         	   = УчетнаяЗаписьПочты.Пароль; 
	ПочтовыйПрофиль.АутентификацияSMTP = УчетнаяЗаписьПочты.ТребуетсяSMTPАутентификация; 
	ПочтовыйПрофиль.ИспользоватьSSLSMTP = ИспользоватьSSLSMTP; 
	ПочтовыйПрофиль.ИспользоватьSSLPOP3 = ИспользоватьSSLPOP3; 
	Возврат ПочтовыйПрофиль;
КонецФункции		
//////////////////////////////////////////////
Функция УстановитьСоединениеИнтернет() 
	результат = Ложь;
	Модем = СокрЛП(Модем);
	Если Модем <>"" Тогда
		Попытка 
			ИнтСоед = Новый ИнтернетСоединение(Модем);
			ИнтСоед.Установить();
			результат = Истина;
		Исключение 
		КонецПопытки;
	Иначе
		результат = Истина;
	КонецЕсли;	
	Возврат результат;
КонецФункции 
//////////////////////////////////////////////
Процедура ПередатьСообщениеПоПочте(Почта,Адрес,Отправмтель,Тема,Вложение)Экспорт
	Сообщение = Новый ИнтернетПочтовоеСообщение;
	Сообщение.Получатели.Добавить(Адрес);
	Сообщение.Тема=Тема;
	Сообщение.Отправитель.Адрес = Адрес;
	Сообщение.Отправитель.ОтображаемоеИмя = Отправмтель;
	Сообщение.Вложения.Добавить(Вложение);
	Почта.Послать(Сообщение);
	//УдалитьФайлы(Вложение);
	Состояние("Передан файл " +Вложение);
КонецПроцедуры
//////////////////////////////////////////////
Функция РазобратьТему(Тема,кодСклада,ИмяФайла)
	рез = Ложь;
	кодСклада = "";
	ИмяФайла  = СокрЛП(Тема);
	поз = Найти(ИмяФайла,"<");
	Если поз = 1 Тогда 
		ИмяФайла = Прав(ИмяФайла,СтрДлина(ИмяФайла)-1);
		поз = Найти(ИмяФайла,">");
		Если поз >0 Тогда 
			КодСклада = Лев(ИмяФайла,поз-1);
			ИмяФайла  = Прав(ИмяФайла,СтрДлина(ИмяФайла)-поз)+".zip";
			рез = Истина;
		КонецЕсли;	
	КонецЕсли;	
	КодСклада = Формат(Число(КодСклада),"ЧЦ=9; ЧГ=0");
	Возврат рез;
КонецФункции	
//////////////////////////////////////////////
Процедура ПриемПочты(КаталогЗагрузки)
	Состояние("Установка Соединения");
	УстановитьСоединениеИнтернет();
	ПрофильПочты = ПрофильПочты();
	Почта = Новый ИнтернетПочта;
	Почта.Подключиться(ПрофильПочты);
	Состояние("Соединение установлено");
	
	Заголовки0 = Почта.ПолучитьЗаголовки(); // все сообщения и читаем только заголовков
	// оставляем нужные 	
	Заголовки = Новый Массив;
	Для каждого Заголовок Из Заголовки0 Цикл
		ОбработкаПрерыванияПользователя()  ;
		Если Найти (Заголовок.Отправитель.ОтображаемоеИмя,"Section")>0 Тогда
			Заголовки.Добавить(Заголовок);
		Иначе	
			Сообщить("Пропускаем Сообщение от "+Заголовок.Отправитель.ОтображаемоеИмя);
		КонецЕсли; 
	КонецЦикла; 
	Если Заголовки.Количество()=0 Тогда
		Предупреждение("Нет сообщений от розничных точек");
		Возврат ;
	КонецЕсли; 
	ВсеСообщения = Почта.Выбрать(Ложь,Заголовки); // все сообщения и читаем только заголовков
	ВсегоПринято = 0;
	Для Каждого Сообщение Из ВсеСообщения Цикл 
		Вложение = Сообщение.Вложения[0]; 
		ИмяФайла = "";
		КодСклада = "";
		Если РазобратьТему(Сообщение.Тема,КодСклада,ИмяФайла) Тогда 
			ОбработкаПрерыванияПользователя()  ;
			Состояние("Прием сообщения от точки " + КодСклада + " имя файла " + ИмяФайла);
			ИмяФайлаСообщения = КаталогЗагрузки + Вложение.Name; 
			ДанныеОбмена = Вложение.Данные; 
			ДанныеОбмена.Записать(ИмяФайлаСообщения); 
			УдаляемыеСообщения = Новый Массив;
			УдаляемыеСообщения.Добавить(Сообщение);
			Почта.УдалитьСообщения(УдаляемыеСообщения);	
			ВсегоПринято = ВсегоПринято+1;
		КонецЕсли ;
	КонецЦикла;	
	Сообщить("Принято " + Строка(ВсегоПринято)+ " сообщений" ); 
	Почта.Отключиться();
КонецПроцедуры	

Функция ЗапросТовары(Данные,РезультатЗапроса)
	
	ТипЦен = Данные.ТипЦен;
	Склад  = Данные.Склад ;
	
	ТипЦенБазовый = ТипЦен ;
	Если ТипЦен.Рассчитывается Тогда 
		ТипЦенБазовый = ТипЦен.БазовыйТипЦен;
		КоэффициентНаценки = ТипЦен.ПроцентСкидкиНаценки/100+1  ;
	Иначе
		ТипЦенБазовый = ТипЦен;
		КоэффициентНаценки = 1 ;
	КонецЕсли ;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВыбСклад",	Данные.Склад);
	Запрос.УстановитьПараметр("ТипЦен",	ТипЦенБазовый);
	Запрос.УстановитьПараметр("КоэффициентНаценки",	КоэффициентНаценки);
	Запрос.УстановитьПараметр("Дата",	КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ДатаПустаяДата",	Дата(1,1,1));
	Запрос.УстановитьПараметр("ВалютаПустаяСсылка",	Справочники.Валюты.ПустаяСсылка());
	Запрос.УстановитьПараметр("МаксПроцентСкидкиПоТоварам",	МаксПроцентСкидкиПоТоварам);
	Запрос.УстановитьПараметр("МаксПроцентНачисленияБонуса",	МаксПроцентНачисленияБонуса);
	Запрос.УстановитьПараметр("ВыгружатьУдаленнуюНоменклатуру",	Истина);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка КАК Элемент,
	|	СправочникНоменклатура.Код КАК Код,
	|	СправочникНоменклатура.Наименование КАК Наименование,
	|	СправочникНоменклатура.Артикул КАК Артикул,
	|	СправочникНоменклатура.НаименованиеПолное КАК НаименованиеПолное,
	|	СправочникНоменклатура.Весовой КАК Весовой,
	|	СправочникНоменклатура.ЭтоГруппа КАК ЭтоГруппа,
	|	ВЫБОР
	|		КОГДА ЦеныНоменклатуры.Цена ЕСТЬ НЕ NULL 
	|			ТОГДА ЦеныНоменклатуры.Цена * &КоэффициентНаценки / ЦеныНоменклатуры.ЕдиницаИзмерения.Коэффициент
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Цена,
	|	СправочникНоменклатура.Родитель КАК Родитель,
	|	ВЫБОР
	|		КОГДА Остатки.КоличествоОстаток ЕСТЬ НЕ NULL 
	|			ТОГДА Остатки.КоличествоОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Количество,
	|	СправочникНоменклатура.БазоваяЕдиницаИзмерения.Наименование,
	|	ЕСТЬNULL(СкидкиНаценкиНоменклатурыСрезПоследних.ПроцентСкидкиНаценки, 0) КАК НижняяГраницаСкидки,
	|	ЕСТЬNULL(СкидкиНаценкиНоменклатурыСрезПоследних.ОграничениеСкидкиНаценки, &МаксПроцентСкидкиПоТоварам) КАК ВерхняяГраницаСкидки,
	|	&МаксПроцентНачисленияБонуса КАК МаксПроцентНачисленияБонуса,
	|	СкидкиНаценкиНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура1,
	|	СправочникНоменклатура.СтавкаНДС,
	|	СправочникНоменклатура.Услуга,
	|	ЕСТЬNULL(Резервы.ОстаокРезерва, 0) КАК ОстатокРезерва
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ТипЦен = &ТипЦен) КАК ЦеныНоменклатуры
	|		ПО СправочникНоменклатура.Ссылка = ЦеныНоменклатуры.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(, Склад = &ВыбСклад) КАК Остатки
	|		ПО СправочникНоменклатура.Ссылка = Остатки.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СкидкиНаценкиНоменклатуры.СрезПоследних(
	|				&Дата,
	|				Валюта = &ВалютаПустаяСсылка
	|					И (ДатаОкончания = &ДатаПустаяДата
	|						ИЛИ ДатаОкончания <> &ДатаПустаяДата
	|							И ДатаОкончания >= &Дата)) КАК СкидкиНаценкиНоменклатурыСрезПоследних
	|		ПО СправочникНоменклатура.Ссылка = СкидкиНаценкиНоменклатурыСрезПоследних.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТоварыВРезервеНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|			СУММА(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток) КАК ОстаокРезерва
	|		ИЗ
	|			РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки КАК ТоварыВРезервеНаСкладахОстатки
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТоварыВРезервеНаСкладахОстатки.Номенклатура) КАК Резервы
	|		ПО СправочникНоменклатура.Ссылка = Резервы.Номенклатура
	|ГДЕ
	|	&ВыгружатьУдаленнуюНоменклатуру
	|	И &ТоварыВключить
	|	И НЕ &ТоварыИсключить";
	Если Склад.Пустая() Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Склад = &ВыбСклад","");
		Розница = Данные.ОстаткиРозница ;
	Иначе
		// ВНИМАНИЕ !!!! ЛОГИЧЕСКОЕ ВЫРАЖЕНИЕ !!!!!!
		Розница = (Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный)  ;
		
	КонецЕсли ;	
	
	ТоварыВключить  = Новый Массив ;
	ТоварыИсключить = Новый Массив ;
	
	Для каждого стрОтбор из НаборыНоменклатуры  Цикл
		Если стрОтбор.НомерНабора = Данные.НаборНоменклатуры  Тогда 
			Если стрОтбор.Исключить Тогда 
				ТоварыИсключить.Добавить(стрОтбор.Номенклатура); 
			Иначе	
				ТоварыВключить.Добавить(стрОтбор.Номенклатура); 
			КонецЕсли ;	
		КонецЕсли ;	
		
	КонецЦикла ;	
	
	Если ТоварыВключить.Количество() >0 Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ТоварыВключить","СправочникНоменклатура.Ссылка В ИЕРАРХИИ(&ТоварыВключить)");
		Запрос.УстановитьПараметр("ТоварыВключить",	ТоварыВключить);
	Иначе
		Запрос.УстановитьПараметр("ТоварыВключить",Истина );
	КонецЕсли ;	
	
	Если ТоварыИсключить.Количество() >0 Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ТоварыИсключить","СправочникНоменклатура.Ссылка В ИЕРАРХИИ(&ТоварыИсключить)");
		Запрос.УстановитьПараметр("ТоварыИсключить",	ТоварыИсключить);
	Иначе
		Запрос.УстановитьПараметр("ТоварыИсключить",Ложь);
	КонецЕсли ;	
	
	
	
	Если НЕ ВыгружатьУдаленнуюНоменклатуру Тогда  
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ВыгружатьУдаленнуюНоменклатуру","Не СправочникНоменклатура.ПометкаУдаления");
	КонецЕсли ;	
	
	Если Розница Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РегистрНакопления.ТоварыНаСкладах","РегистрНакопления.ТоварыВРознице");		   
	КонецЕсли ;				   
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ  РезультатЗапроса.Пустой() ;
КонецФункции

Функция ПродажиПоОперативнымОтчетам(Склад)
	Запрос = Новый Запрос ;
	Запрос.УстановитьПараметр("ДвижениеПриход",ВидДвиженияНакопления.Приход) ;
	Запрос.УстановитьПараметр("ДвижениеРасход",ВидДвиженияНакопления.Приход) ;
	Запрос.УстановитьПараметр("Комментарий","%Оперативный%") ;
	Запрос.УстановитьПараметр("Склад",Склад) ;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыВРознице.Номенклатура,
	|	ТоварыВРознице.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА ТоварыВРознице.ВидДвижения = &ДвижениеПриход
	|			ТОГДА 1
	|		ИНАЧЕ -1
	|	КОНЕЦ КАК Коэффициент
	|ПОМЕСТИТЬ Врем1
	|ИЗ
	|	РегистрНакопления.ТоварыВРознице КАК ТоварыВРознице
	|ГДЕ
	|	ТоварыВРознице.Регистратор.Комментарий ПОДОБНО &Комментарий
	|	И ТоварыВРознице.Склад = &Склад
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыНаСкладах.Номенклатура,
	|	ТоварыНаСкладах.Количество,
	|	ВЫБОР
	|		КОГДА ТоварыНаСкладах.ВидДвижения = &ДвижениеПриход
	|			ТОГДА 1
	|		ИНАЧЕ -1
	|	КОНЕЦ
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
	|ГДЕ
	|	ТоварыНаСкладах.Регистратор.Комментарий ПОДОБНО &Комментарий
	|	И ТоварыНаСкладах.Склад = &Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Врем1.Номенклатура,
	|	СУММА(Врем1.Количество * Врем1.Коэффициент) КАК Количество
	|ИЗ
	|	Врем1 КАК Врем1
	|
	|СГРУППИРОВАТЬ ПО
	|	Врем1.Номенклатура"
	;
	
	Если Склад.Пустая() Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ТоварыВРознице.Склад = &Склад","Истина");
	КонецЕсли ;
	Если Склад.Пустая() Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ТоварыНаСкладах.Склад = &Склад","Истина");
	КонецЕсли ;
	
	Возврат Запрос.Выполнить().Выгрузить();	
КонецФункции

Функция ТоварыПроданыОперативно()
	Запрос = Новый Запрос ;
	Запрос.УстановитьПараметр("ЭтоОперативный","Оперативный");
	Запрос.Текст = "";
КонецФункции 	
/////////////////////////////////////////////
Функция ВыборкаШтрихКоды() 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Штрихкоды.Штрихкод,
	|	Штрихкоды.Владелец.Код КАК Код,
	|	Штрихкоды.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|	0 КАК НомерПрайса
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Владелец ССЫЛКА Справочник.Номенклатура";
	
	Возврат Запрос.Выполнить().выбрать();
	
КонецФункции 

/////////////////////////////////////////////
Функция ВыборкаАкцииШтрихКоды() 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Акции",УсловияАкций);
	Запрос.Текст = "ВЫБРАТЬ
	|	Акции.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВремАкции
	|ИЗ
	|	&Акции КАК Акции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремАкции.Номенклатура
	|ИЗ
	|	ВремАкции КАК ВремАкции"; 
	
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции 


//////////////////////////////////////////////////////////////
Функция ДБФ_Товары(Каталог)
	ПолнИмяФайла = Каталог + "\Products.dbf";//  " + СокрЛП(Склад.Наименование) + "\
	База = Новый XBase();
	п = База.поля;
	п.Добавить("CODE",		"C", 13); //Главный код товара. Ведущие нули обязательны
	п.Добавить("ARTIKUL",	"C", 30);//артикул 
	п.Добавить("NAME",		"C", 100);//Полное наименование товара
	п.Добавить("SHORTNAME",	"C", 12); //Короткое наименование товара
	п.Добавить("PRICE",		"N", 19, 4);//Цена товара
	п.Добавить("ED",		"C", 5); //Наименование единицы измерения товара
	п.Добавить("SECTION",	"N", 3); //Секция, в которую пришёл товар
	п.Добавить("GROUP",		"C", 10); //Группа, к которой относится товар. Строка разбита по два символа: g1g1g2g2g3g3g4g4g5g5
	п.Добавить("KOL",		"N", 19, 4); //Количество товара
	п.Добавить("CONTROL",	"N", 5);// Признак штучности товара 0-штучный, 1-весовой
	п.Добавить("SKIDMIN",	"N", 5, 1);// % скидки на товар мин
	п.Добавить("SKIDMAX",	"N", 5, 1);// % скидки на товар макс
	п.Добавить("BONUSMIN",	"N", 5, 1);//% бонус  мин
	п.Добавить("BONUSMAX",	"N", 5, 1);//% бонус  макс
	п.Добавить("AlcType",	"C", 3);//Код Вида Алк продукции 
	
	База.СоздатьФайл(ПолнИмяФайла);
	База.Кодировка = КодировкаXBase.OEM;
	
	Возврат База;
КонецФункции
////////////////////////////////////////////////////
Функция ДБФ_ШК(Каталог)
	ПолнИмяФайла = Каталог + "\DopCodes.dbf";
	База = Новый XBase();
	п = База.поля;
	п.Добавить("DOPCODE",	"C", 24);
	п.Добавить("MAINCODE",	"C", 13);
	п.Добавить("KOEF",		"N", 10, 3);
	п.Добавить("NUMPRICE",	"N", 4);
	
	База.СоздатьФайл(ПолнИмяФайла);
	База.Кодировка = КодировкаXBase.OEM;
	
	Возврат База;
КонецФункции
////////////////////////////////////////////////////////////////\\
Функция ДБФ_Группы(Каталог)
	ПолнИмяФайла = Каталог + "\Names.dbf"; 
	База = Новый XBase();
	п = База.поля;
	п.Добавить("NUM",	"C", 10); // Номер Группы 
	п.Добавить("NAME",	"C", 60); // Название группы 
	п.Добавить("TYPE",		"N", 1, 0);
	п.Добавить("SKIDMIN",	"N", 5, 1);// % скидки на товар мин
	п.Добавить("SKIDMAX",	"N", 5, 1);// % скидки на товар макс
	//  Поле Type
	//	0 – наименование секции;
	//  1 – наименование группы.
	База.СоздатьФайл(ПолнИмяФайла);
	База.Кодировка = КодировкаXBase.OEM;
	Возврат База;
	
КонецФункции
////////////////////////////////////////////////////////////////\\
Функция ДБФ_Прайсы(Каталог)
	// DopPrice.dbf	
	// MAINCODE  Символьное   13  Главный код товара
	// NUMPRICE  Числовой     4	   Номер прайса-партии
	// PRICE     Числовой     19 4 Цена товара в данном прайсе-партии	
	// KOLOST    Числовой     19 4 Остаток товара в данном прайсе-партии. Или количество прихода товара по данной партии, если товар загружается через Docs.dbf.
	ПолнИмяФайла = Каталог + "\DopPrice.dbf"; 
	База = Новый XBase();
	п = База.поля;
	п.Добавить("MAINCODE",	"C", 13); // Номер Группы 
	п.Добавить("NUMPRICE",	"N", 4); // Название группы 
	п.Добавить("PRICE",		"N", 19, 4);
	п.Добавить("KOLOST",		"N", 19, 4);
	п.Добавить("SKIDMIN",	"N", 5, 1);// % скидки на товар мин
	п.Добавить("SKIDMAX",	"N", 5, 1);// % скидки на товар макс
	п.Добавить("BONUSMIN",	"N", 5, 1);//% бонус  мин
	п.Добавить("BONUSMAX",	"N", 5, 1);//% бонус  макс
	База.СоздатьФайл(ПолнИмяФайла);
	База.Кодировка = КодировкаXBase.OEM;
	Возврат База;
КонецФункции
////////////////////////////////////////////////////////////////\\
Функция НайтиГруппуНоменклатуры(ТаблГрупп,Группа)
	ТекСтрока = ТаблГрупп.Найти(Группа,"Группа");
	
	Если (ТекСтрока = Неопределено)  Тогда 
		
		стр = ТаблГрупп.Добавить();
		стр.Группа = Группа ;
		Стр.Родитель = Группа.Родитель ;
		СтрокаРодителя  = НайтиГруппуНоменклатуры(ТаблГрупп,Стр.Родитель) ;
		
		Отбор = Новый структура ("Родитель",Стр.Родитель);
		МойКод   =  ТаблГрупп.НайтиСтроки(Отбор).Количество() ;
		
		Если МойКод  > 99 Тогда 
			Сообщить("Превышение количества на уровне  > 99");
			МойКод = 99 ;
		КонецЕсли ;		
		
		Уровень = Группа.Уровень() ;
		
		Если Уровень  > 5 Тогда 
			Сообщить("Превышение уровней  > 5");
			Уровень = 5 ;
		КонецЕсли ;		
		
		КодГр = Лев(СтрокаРодителя.КодГр,Уровень*2) + Формат(МойКод,"ЧЦ=2; ЧВН=");
		Стр.КодГр =  Лев(КодГр+"0000000000",10);
		ТекСтрока = Стр ;
	КонецЕсли;	
	Возврат ТекСтрока ;
КонецФункции 

Функция КодГруппы(Группа,ТаблГрупп)
	
	Если ТаблГрупп = неопределено Тогда 
		ТаблГрупп  = Новый ТаблицаЗначений;
		ТаблГрупп.Колонки.Добавить("КодГр");
		ТаблГрупп.Колонки.Добавить("Группа");
		ТаблГрупп.Колонки.Добавить("Родитель");  // 
		ТаблГрупп.Колонки.Добавить("ЕстьЭлементы");
		стр = ТаблГрупп.Добавить();
		стр.Группа = Справочники.Номенклатура.ПустаяСсылка() ;
		стр.Родитель = Справочники.Номенклатура.ПустаяСсылка() ;
		Стр.КодГр = "0000000000";  
	КонецЕсли;	
	
	рез = "0000000000"; 
	
	Если Группа <> Неопределено Тогда
		Если Группа.ЭтоГруппа  Тогда 
			ТекСтрока = НайтиГруппуНоменклатуры(ТаблГрупп,Группа);
			рез = ТекСтрока.КодГр;
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат рез ;
	
КонецФункции	

Функция СформироватьДопЦены(Каталог) 
	рез = ЛОЖЬ;
	НомерПрайса = 1 ;
	
	База = ДБФ_Прайсы(Каталог);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура.Код КАК Код,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) / ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент КАК Цена
	|ПОМЕСТИТЬ ВремПрайсы
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
	|ГДЕ
	|	ЦеныНоменклатурыСрезПоследних.ТипЦен.Ссылка = &ТипЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремПрайсы.Код,
	|	ВремПрайсы.Цена
	|ИЗ
	|	ВремПрайсы КАК ВремПрайсы
	|ГДЕ
	|	ВремПрайсы.Цена > 0";
	
	
	
	Для каждого стр из списокДопЦен Цикл 
		
		Запрос.УстановитьПараметр("ТипЦен",стр.	ТипЦен);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			База.Добавить();
			База.MAINCODE	= Выборка.Код;
			База.PRICE		= Выборка.Цена;
			База.NUMPRICE   = стр.КодЦеныККМ;
			База.SKIDMIN    = 0;
			База.SKIDMAX    = 100;
			База.BONUSMIN   = 0;
			База.BONUSMAX   = 100;
			База.Записать();
		КонецЦикла;
		
	КонецЦикла  ;	
	
	Если АкционныйПрайс = 99 Тогда 
		
		Запрос.УстановитьПараметр("УсловияАкций",УсловияАкций);
		
		Запрос.Текст = "ВЫБРАТЬ
		|	УсловияАкций.Номенклатура
		|ПОМЕСТИТЬ ВремУсловияАкций
		|ИЗ
		|	&УсловияАкций КАК УсловияАкций
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВремУсловияАкций.Номенклатура
		|ИЗ
		|	ВремУсловияАкций КАК ВремУсловияАкций";				
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() цикл 
			
			База.Добавить();
			База.MAINCODE	= "00"+Выборка.Номенклатура.Код;
			База.PRICE		= 0;
			База.NUMPRICE   = АкционныйПрайс;
			База.SKIDMIN    = 0;
			База.SKIDMAX    = 100;
			База.BONUSMIN   = 0;
			База.BONUSMAX   = 100;
			База.Записать();
			
		КонецЦикла ;
	КонецЕсли;	
	
	Ответ = База.КоличествоЗаписей()>0 ;
	
	База.ЗакрытьФайл();
	
	Возврат Ответ;
КонецФункции	
////////////////////////////////////////////////////////////////\\
Функция КаталогВыгрузки()
	Возврат   КаталогВременныхФайлов();
КонецФункции	
////////////////////////////////////////////////////////////////\\
Процедура ФормированиеФайлаФлагов()
	//CLEAR_PRODUCTS	- очистить базу товара;
	//CLEAR_DOPCODES    - очистить базу штрих-кодов;
	//CLEAR_CLIENTS     - очистить базу клиентов;
	//ZREPORT           - выполнить экспорт товарного отчёта.
	//XREPORT           - выполнить экспорт оперативных
	рез = Ложь;
	ИмяФлага =  КаталогВыгрузки()+"Zimp.ZFL";
	Текст = Новый ТекстовыйДокумент;
	
	Если ВыгружатьТоварыИЦены Тогда 
		
		Если флЧистТовары Тогда
			Текст.ДобавитьСтроку("CLEAR_PRODUCTS");
			Текст.ДобавитьСтроку("CLEAR_DOPCODES");
			Текст.ДобавитьСтроку("CLEAR_DOPPRICE");
			Текст.ДобавитьСтроку("CLEAR_NAMES");
		КонецЕсли; 
	КонецЕсли; 
	
	Если флЧистКлиентов Тогда
		Текст.ДобавитьСтроку("CLEAR_CLIENTS");
	КонецЕсли; 
	
	Если флЧистДопЦены Тогда
		Текст.ДобавитьСтроку("CLEAR_DOPPRICE");
	КонецЕсли;                                                              	
	Текст.ДобавитьСтроку("CLEAR_ACTS");
	Текст.Записать(ИмяФлага,КодировкаТекста.ANSI);	
	
КонецПроцедуры
////////////////////////////////////////////////////////////
Функция ДБФ_Клиенты(Каталог)
	ПолнИмяФайла = Каталог + "\Clients.dbf";
	База = Новый XBase();
	
	п = База.поля;
	п.Добавить("OTDEL","N",5,0);  // отдел
	п.Добавить("CODE","C",13,0);  // код карты 
	п.Добавить("NAME","C",30,0);  // имя пкарты 
	п.Добавить("BLOCK","L",0,0);  // блокирован 
	п.Добавить("NUMSHEME","N",3,0);  // Номер схемы накопления 
	п.Добавить("NUMPrice","N",3,0);  // Номер прайса  
	п.Добавить("SKIDKA","N",19,4);  // процент скидки 
	п.Добавить("LIMITSUM","N",19,4);   // лимит суммы 
	п.Добавить("ITOG","N",19,4);       // итого покупок 
	п.Добавить("DATEEND","D",0,0);     // срок дейсвия 
	п.Добавить("TYPECASH","C",6,0);    // тип оплаты 
	п.Добавить("BonusProc","N",19,4);  // процент бонуса 
	п.Добавить("Ostatok","N",19,4);    // остаток бонусов 
	п.Добавить("Bonus","L",1,0);       // платежная карта
	п.Добавить("IsCredit","L",1,0);    // кредитная
	п.Добавить("Vnes","L",1,0);        // пополняемая
	
	
	База.СоздатьФайл(ПолнИмяФайла);
	База.Кодировка = КодировкаXBase.OEM;
	
	Возврат База;
КонецФункции

Функция ДБФ_ДопИнфо(Каталог)
	ПолнИмяФайла = Каталог + "\DopIVals.dbf";
	База = Новый XBase();
	
	п = База.поля;
	п.Добавить("NUM","C",1);  // Номер  Доп инфо 
	п.Добавить("Code","C",12,0);  // Код  
	п.Добавить("Value","C",20);  //  Наименовнаие 
	
	База.СоздатьФайл(ПолнИмяФайла);
	База.Кодировка = КодировкаXBase.OEM;
	
	Возврат База;
КонецФункции

Функция ПроцентСкидкиКлиента(Выборка,СкидкиПоВидуКарт,ТаблицаРасчетаПроцентаСкидки)
	// Определяем будем делать расчет по схеме или нет 	
	
	стр = НачислениеБонусов.Найти(Выборка.ВидДисконтнойКарты,"ВидКарты");
	
	РасчетКартыПоСхеме = ?(стр =Неопределено,
	Ложь,
	стр.РасчетПроцентаСкидкиПоСхеме)
	И 
	КартыРасчетПоСхеме
	;
	
	Если РасчетКартыПоСхеме Тогда  	
		Для каждого стр из 	ТаблицаРасчетаПроцентаСкидки Цикл 
			процентСкидки =стр.процентСкидки;	
			Если Стр.СуммаНачальная <  Выборка.СуммаПокупок  Тогда 
				Прервать ;
			КонецЕсли ;	
		КонецЦикла ;	
		
	Иначе 
		
		//	берем скидки из  источник - РС - "скидки по номенклатуре" 
		
		// 1 процент скидки по карте //    	
		ПроцентСкидки = Выборка.ПроцентСкидки ; 
		
		Если ПроцентСкидки = 0 Тогда 
			// 2 Процент скидки по виду карт 		
			стр = СкидкиПоВидуКарт.Найти(Выборка.ВидДисконтнойКарты,"ВидДисконтнойКарты") ;
			Если Стр <> Неопределено Тогда 
				процентСкидки =стр.процентСкидки;	
			КонецЕсли ;	
			
		КонецЕсли ;	
		
	КонецЕсли ;
	
	Возврат процентСкидки ;	
	
КонецФункции	

////////////////////////////////////////////////////
//    Персональные покупатели
////////////////////////////////////////////////////
////////////////////////////////////////////////////
//    Персональные покупатели
////////////////////////////////////////////////////
Процедура ДобавитьКлиента(База,стрКлиент)
	//	Фильтр невыгружаемых карт 
	Если  Не пустаяСтрока(ПрефиксНевыгружаемыхКарт) Тогда 
		Если Найти(стрКлиент.КодКарты,ПрефиксНевыгружаемыхКарт) =1 Тогда 
			Возврат ;	
		КонецЕсли ;	
	КонецЕсли ;	
	
	База.Добавить();
	
	База.Code      = стрКлиент.КодКарты;
	
	База.Name      = стрКлиент.Наименование;
	
	База.NUMSHEME    = стрКлиент.НомерСхемыНакопления ;  // Номер схемы накоплния 
	База.Block     = стрКлиент.ПометкаУдаления;  
	
	ЗаполненТипЦен = Ложь ;
	
	Если ЗначениеЗаполнено(стрКлиент.ТипЦен)  Тогда 
		Если Не стрКлиент.ТипЦен.Пустая()  Тогда 
			
			стр = СписокДопЦен.Найти(стрКлиент.ТипЦен,"ТипЦен");
			Если стр <> Неопределено Тогда 
				База.NumPrice  = стр.КодЦеныККМ;  
				ЗаполненТипЦен = Истина ;
			КонецЕсли ;	
		КонецЕсли ;	
	КонецЕсли ;	
	
	Если Не ЗаполненТипЦен Тогда 	
		База.Skidka    = СтрКлиент.ПроцентСкидки;  // Обычная Скидка
	КонецЕсли ;
	
	Если Не стрКлиент.ВидКарты.пустая() Тогда 
		стр = НачислениеБонусов.Найти(стрКлиент.ВидКарты,"ВидКарты"); 
		Если стр <> Неопределено  Тогда 
			База.Bonus     = стр.Платежная;  
			База.IsCredit  = стр.Кредит; 
			База.Vnes      = стр.Пополняемая; 
			
		КонецЕсли ;	
		
	КонецЕсли ;	
	
	// Накопления по сумме покупок 
	База.ITOG     = стрКлиент.Сумма;  
	
	Если РасчетБонусныхОпераций Тогда 
		
		База.OSTATOK = стрКлиент.ОстатокБонусов;  
		
	КонецЕсли ;
	
	
	
	База.Записать();
КонецПроцедуры

////////////////////////////////////////////////////////////
//	заполнение данные по дисконтным и бонусным картам
////////////////////////////////////////////////////////////
 	
Функция КартиРассчитываемыеПоСхеме() 
// Продажи по диск картам из документа Отчет ККМ 	
// Расчетные по схеме 
	СтрокиВидов = НачислениеБонусов.НайтиСтроки(Новый Структура("РасчетПроцентаСкидкиПоСхеме",Истина));
	ВидыДисконтныхКарт = Новый Массив ;
	Для каждого СтрокаВидовКарт из СтрокиВидов Цикл 
		ВидыДисконтныхКарт.Добавить(СтрокаВидовКарт.ВидКарты);		
	КонецЦикла ;
	
	Запрос = Новый Запрос ;
	
	
	ДатаНачала    = '00010101';		
	ДатаОкончания = '00010101';			
	
	Если УчитыватьПериод Тогда 
		ДатаНачала    = ДобавитьМесяц(НачалоМесяца(ТекущаяДата()),-1 );		
		ДатаОкончания = КонецМесяца(ТекущаяДата())   ;			
	КонецЕсли ;	
	
	
	Запрос.УстановитьПараметр("УсловиеПоКарте",Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте);
	Запрос.УстановитьПараметр("ВидыДисконтныхКарт",ВидыДисконтныхКарт);
	Запрос.УстановитьПараметр("ДатаНачала",ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",ДатаОкончания);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтчетОРозничныхПродажахТовары.ЗначениеУсловияАвтоматическойСкидки КАК Карта,
	|	СУММА(ОтчетОРозничныхПродажахТовары.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТ_Покупки
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Товары КАК ОтчетОРозничныхПродажахТовары
	|ГДЕ
	|	ОтчетОРозничныхПродажахТовары.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ОтчетОРозничныхПродажахТовары.УсловиеАвтоматическойСкидки = &УсловиеПоКарте
	|	И ОтчетОРозничныхПродажахТовары.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетОРозничныхПродажахТовары.ЗначениеУсловияАвтоматическойСкидки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнформационныеКарты.Ссылка
	|ПОМЕСТИТЬ ВТ_Карты
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|ГДЕ
	|	ИнформационныеКарты.ВидДисконтнойКарты В(&ВидыДисконтныхКарт)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Карты.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
	|	ВТ_Карты.Ссылка.ВидДисконтнойКарты КАК ВидКарты,
	|	ВТ_Карты.Ссылка.ВладелецКарты.ОсновнойДоговорКонтрагента.ТипЦен КАК ТипЦен,
	|	ВТ_Карты.Ссылка.ВладелецКарты.Наименование КАК Наименование,
	|	ВТ_Карты.Ссылка.КодКарты КАК КодКарты,
	|	ЕСТЬNULL(ВТ_Покупки.Сумма, 0) КАК СУмма,
	|	0 КАК ПроцентСкидки,
	|	-1 КАК НомерСхемыНакопления
	|ИЗ
	|	ВТ_Карты КАК ВТ_Карты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Покупки КАК ВТ_Покупки
	|		ПО ВТ_Карты.Ссылка = ВТ_Покупки.Карта"
	;	
	
	тз = Запрос.Выполнить().Выгрузить();
	
	// Для скорости делаем сортировку в обратном порядке 
	ТаблицаРасчетаПроцентаСкидки = ПроцентыСкидокПоКлиентам.Выгрузить();
	ТаблицаРасчетаПроцентаСкидки.Сортировать("СуммаНачальная Убыв");
	
	Для каждого стрКарта из тз цикл 
		Для каждого стрПроц из 	ТаблицаРасчетаПроцентаСкидки Цикл 
			Если стрПроц.СуммаНачальная <  стрКарта.Сумма  Тогда 
				стрКарта.ПроцентСкидки = стрПроц.процентСкидки;	
				Прервать ;
			КонецЕсли ;	
			
			строка = НачислениеБонусов.Найти(стрКарта.ВидКарты,"ВидКарты"); 
			стрКарта.НомерСхемыНакопления =  ?(строка = Неопределено ,-1,строка.НомерСхемыТС); 	
			
		КонецЦикла ;	
		
		
	КонецЦикла ;
	
	
	Возврат тз ;
	
КонецФункции 	
 	
Функция КартыФиксированныеСкидки()
	
	СтрокиВидов = НачислениеБонусов.НайтиСтроки(Новый Структура("РасчетПроцентаСкидкиПоСхеме",Ложь));
	ВидыДисконтныхКарт = Новый Массив ;
	Для каждого СтрокаВидовКарт из СтрокиВидов Цикл 
		ВидыДисконтныхКарт.Добавить(СтрокаВидовКарт.ВидКарты);		
	КонецЦикла ;
    Запрос = Новый Запрос ;
	Запрос.УстановитьПараметр("ВидыДисконтныхКарт",ВидыДисконтныхКарт);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнформационныеКарты.ПометкаУдаления,
	|	ИнформационныеКарты.ВидДисконтнойКарты КАК ВидКарты,
	|	ИнформационныеКарты.КодКарты,
	|	ИнформационныеКарты.ВладелецКарты.Наименование КАК Наименование,
	|	ИнформационныеКарты.ВладелецКарты.ОсновнойДоговорКонтрагента.ТипЦен КАК ТипЦен,
	|	0 КАК ПроцентСкидки,
	|	0 КАК Сумма,
	|	-1 КАК НомерСхемыНакопления
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|ГДЕ
	|	ИнформационныеКарты.ВидДисконтнойКарты В(&ВидыДисконтныхКарт)"
	;	
	
	
	тз = запрос.Выполнить().Выгрузить();
	
	для каждого стр из тз цикл 
		строка = НачислениеБонусов.Найти(стр.ВидКарты,"ВидКарты"); 
		стр.ПроцентСкидки =  ?(строка = Неопределено ,0,строка.ПроцентСкидки); 	
	КонецЦикла ;	
	
	Возврат тз ;
	
КонецФункции 	

Процедура КартыКлиентов(Каталог)
	
	
	
//#Область СтараяСхема	
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Дисконтная",Перечисления.ТипыИнформационныхКарт.Дисконтная);
	//Запрос.УстановитьПараметр("ДатаНачала",ДатаНачала);
	//Запрос.УстановитьПараметр("ДатаОкончания",ДатаОкончания);
	//Запрос.УстановитьПараметр("УсловияОтбораВидаСкидок",Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте);
	//Запрос.УстановитьПараметр("ПустойТипЦен",Справочники.ТипыЦенНоменклатуры.ПустаяСсылка());
	//Запрос.УстановитьПараметр("ПустойВидКарты",Справочники.ВидыДисконтныхКарт.ПустаяСсылка());
	//
	////  Старая схеме из р наколения по покупателям  как в опте 
	//// 	ПроцентСкидки - из рс скидки номенклатуры
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ИнформационныеКарты.Ссылка,
	//|	ИнформационныеКарты.ВладелецКарты,
	//|	ИнформационныеКарты.КодКарты КАК КодКарты,
	//|	ИнформационныеКарты.ПометкаУдаления,
	//|	ЕСТЬNULL(ИнформационныеКарты.ВидДисконтнойКарты, &ПустойВидКарты) КАК ВидДисконтнойКарты,
	//|	ЕСТЬNULL(ИнформационныеКарты.ВладелецКарты.ОсновнойДоговорКонтрагента.ТипЦен, &ПустойТипЦен) КАК ТипЦен,
	//|	ЕСТЬNULL(ПродажиПоДисконтнымКартамОбороты.СуммаОборот, 0) КАК СуммаПокупок,
	//|	ЕСТЬNULL(СкидкиНаценки.ПроцентСкидкиНаценки, 0) КАК ПроцентСкидки,
	//|	СкидкиНаценки.ДатаОкончания,
	//|	ЕСТЬNULL(-ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток, 0) КАК ОстатокБонусов
	//|ИЗ
	//|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиПоДисконтнымКартам.Обороты(&ДатаНачала, &ДатаОкончания, , ) КАК ПродажиПоДисконтнымКартамОбороты
	//|		ПО ИнформационныеКарты.Ссылка = ПродажиПоДисконтнымКартамОбороты.ДисконтнаяКарта
	//|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//|			СкидкиНаценкиПоПидуКарты.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	//|			СкидкиНаценкиПоПидуКарты.ОграничениеСкидкиНаценки КАК ОграничениеСкидкиНаценки,
	//|			СкидкиНаценкиПоПидуКарты.Условие КАК Условие,
	//|			СкидкиНаценкиПоПидуКарты.ЗначениеУсловия КАК ЗначениеУсловия,
	//|			СкидкиНаценкиПоПидуКарты.ДатаОкончания КАК ДатаОкончания
	//|		ИЗ
	//|			РегистрСведений.СкидкиНаценкиНоменклатуры КАК СкидкиНаценкиПоПидуКарты
	//|		ГДЕ
	//|			СкидкиНаценкиПоПидуКарты.Условие В(&УсловияОтбораВидаСкидок)) КАК СкидкиНаценки
	//|		ПО ИнформационныеКарты.Ссылка = СкидкиНаценки.ЗначениеУсловия
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки КАК ВзаиморасчетыСКонтрагентамиОстатки
	//|		ПО ИнформационныеКарты.ВладелецКарты = ВзаиморасчетыСКонтрагентамиОстатки.Контрагент
	//|ГДЕ
	//|	ИнформационныеКарты.ТипКарты = &Дисконтная"
	//;	
	
//#КонецОбласти	
	
	База = ДБФ_Клиенты(Каталог);

	тз= КартиРассчитываемыеПоСхеме();
	Для каждого стрКлиент из Тз цикл ;
		ДобавитьКлиента(База,стрКлиент) ;
	КонецЦикла;	
	
	тз= КартыФиксированныеСкидки();
	Для каждого стрКлиент из Тз цикл ;
		ДобавитьКлиента(База,стрКлиент) ;
	КонецЦикла;	
	
	База.ЗакрытьФайл();
	
КонецПроцедуры	

ПРоцедура ИнформацияПоПРодавцам(Каталог) 
	Запрос = Новый Запрос ;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект.Код как Код,
	|	ЗначенияСвойствОбъектов.Объект.Наименование как Наименование ,
	|	ЗначенияСвойствОбъектов.Значение как ЭтоПродавец
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство.Наименование = ""Продавец""
	|	И ЗначенияСвойствОбъектов.Объект ССЫЛКА Справочник.ФизическиеЛица";
	Выборка = Запрос.Выполнить().Выбрать();
	База = ДБФ_ДопИнфо(Каталог) ; 
	
	Пока выборка.следующий() Цикл 
		
		Если выборка.ЭтоПродавец Тогда 
			База.Добавить();
			База.Num      = "1";
			База.Code      = "000"+Выборка.Код;
			База.Value      = Выборка.Наименование;
			База.Записать();
			
		КонецЕсли ;	
		
	КонецЦикла ;	
	База.ЗакрытьФайл();
	
КонецПроцедуры 	

//Функция ОтделККМ(Номенклатура,СтавкаНДС,ТзНДС,ОтделыККМ)
//	
//	рез=ОтделПоУмолчанию;
//	
//	Если УстановкаОтделаПоТоварам = 1 Тогда 
//		// По ставке НДС 
//		Стр = ТзНДС.Найти(СтавкаНДС,"") ;
//		Если стр <> Неопределено Тогда 
//			рез = стр.Отдел ;	
//		КонецЕсли ;	
//	ИначеЕсли УстановкаОтделаПоТоварам = 2 Тогда 
//		рез = ОтделККМПоТовару(ОтделыККМ,Номенклатура);	  
//	КонецЕсли ;	
//	
//	Возврат рез ;
//	
//КонецФункции	

Функция ВыгрузитьКассиров(Каталог) 
	
	//	Тип кассира
	//0 – стажёр;
	//1 – кассир;
	//2 – старший кассир;
	//3 – администратор (может быть только один).
	
	
	рез = Ложь ;
	
	База = ДБФ_Кассиры(Каталог);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	(НЕ ФизическиеЛица.ПометкаУдаления)
	|	И (НЕ ФизическиеЛица.ЭтоГруппа )";
	результатЗапроса = Запрос.Выполнить() ;
	
	Если Не результатЗапроса.Пустой() Тогда 
		СписокОбъектов = результатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");	
		Запрос.УстановитьПараметр("СписокОбъектов",СписокОбъектов);
		Запрос.Текст = "ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Объект КАК Объект,
		|	ЗначенияСвойствОбъектов.Свойство.Наименование КАК Наименование,
		|	ЗначенияСвойствОбъектов.Значение
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Объект В(&СписокОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Объект";
		Выборка = Запрос.Выполнить().Выбрать();
		НомерКассира  = 0 ;
		
		//Для каждого элем  из СписокОбъектов цикл 
		//	Выборка.Сбросить() ;
		Пока Выборка.СледующийПоЗначениюПоля("Объект") Цикл 
			НомерКассира  = НомерКассира + 1 ;
			База.Добавить();
			
			База.Name  = Выборка.Объект.Наименование;
			База.Number = НомерКассира ;
			Пока Выборка.СледующийПоЗначениюПоля("Наименование") Цикл 
				
				Если Выборка.Наименование = "ПарольКассира" Тогда 
					База.Pass = Выборка.Значение;
				ИначеЕсли Выборка.Наименование = "ТипКассира" Тогда 
					База.Type = ТипКассира(Выборка.Значение.Наименование);
				КонецЕсли ;	
			КонецЦикла ;
			База.Записать();
		КонецЦикла ;
		рез = Истина ;
		//КонецЦикла ; 	
	КонецЕсли ;
	Возврат рез ;
КонецФункции	

Функция ДБФ_Кассиры(Каталог)
	ПолнИмяФайла = Каталог + "\Kassirs.dbf";
	База = Новый XBase();
	п = База.поля;
	п.Добавить("PASS","C",20,0);  // Пароль кассира
	п.Добавить("NUMBER","N",2,0);  // Номер кассира
	п.Добавить("NAME","C",60,0);  // имя кассира 
	п.Добавить("TYPE","N",1,0);  // Тип кассира
	//Тип кассира
	//0 – стажёр;
	//1 – кассир;
	//2 – старший кассир;
	//3 – администратор (может быть только один).
	База.СоздатьФайл(ПолнИмяФайла);
	База.Кодировка = КодировкаXBase.OEM;
	
	Возврат База;
КонецФункции	

Функция ТипКассира(ЗначениеСвойства)
	рез = -1 ;
	Если ЗначениеСвойства = "Администратор"	Тогда 
		рез = 3 ;
	ИначеЕсли ЗначениеСвойства = "СтаршийКассир"	Тогда 
		рез = 2 ;
	ИначеЕсли ЗначениеСвойства = "Кассир"	Тогда 
		рез = 1 ;
	ИначеЕсли ЗначениеСвойства = "Стажёр"	Тогда 
		рез = 0 ;
	КонецЕсли ;	
	Возврат рез;
КонецФункции	
////////////////////////////////////////////////////////////////

//Функция ОтделККМПоТовару(ОтделыККМ,Товар)
//	результат=ОтделПоУмолчанию;
//	// 1 Сначала Сам Объект , индивидуальный процент 
//	Строки = ОтделыККМ.НайтиСтроки(Новый Структура("Номенклатура",Товар));
//	Если Строки.Количество() = 1 Тогда 
//		результат = строки[0].ОтделККМ ;
//	Иначе
//		// Вхождение в группу 
//		Уровень = Товар.Уровень();
//		УровеньГруппы = -1 ;
//		
//		Для каждого стр из ОтделыККМ Цикл 
//			
//			Если стр.ЭтоГруппа Тогда 
//				
//				Если Товар.ПринадлежитЭлементу(стр.Номенклатура) Тогда 
//					
//					Если стр.Уровень > УровеньГруппы Тогда 
//						УровеньГруппы = стр.Уровень ;
//						результат     = стр.ОтделККМ ;
//						Прервать ;
//					КонецЕсли ;
//				КонецЕсли ;	
//				
//			КонецЕсли ;	
//			
//		КонецЦикла ;	
//		
//	КонецЕсли ;	
//	
//	Возврат результат ;
//	
//КонецФункции 	

Функция ОтделыККМ()	
	
	Запрос = Новый Запрос ;
	Запрос.УстановитьПараметр("СвойствоОтделККМ",СвойствоОтделККМ);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗначенияСвойствОбъектов.Значение КАК Отдел,
	               |	ЗначенияСвойствОбъектов.Объект КАК Номенклатура,
	               |	ЗначенияСвойствОбъектов.Объект.ЭтоГруппа КАК ЭтоГруппа
	               |ИЗ
	               |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	               |ГДЕ
	               |	ЗначенияСвойствОбъектов.Свойство = &СвойствоОтделККМ";
	тз = Запрос.Выполнить().Выгрузить();
	тз.Колонки.Добавить("Уровень");
	
	Для каждого стрОтдел из тз Цикл 
		стрОтдел.Уровень = стрОтдел.Номенклатура.уровень();
	КонецЦикла ;	
	
	
	тз.Сортировать("Уровень Убыв");
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Номенклатура.Ссылка КАК Номенклатура
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	НЕ Номенклатура.ЭтоГруппа
	               |	И НЕ Номенклатура.Ссылка В (&ИсключенияНоменклатуры)
	               |	И Номенклатура.Ссылка В ИЕРАРХИИ(&ГруппаТоваров)";
				   
	НоменклатураОтдел = Новый ТаблицаЗначений  ;
	НоменклатураОтдел.Колонки.Добавить("Отдел");
	НоменклатураОтдел.Колонки.Добавить("Номенклатура");
	
	ИсключенияНоменклатуры  =  Новый Массив ;
	
	
	Для каждого стрОтдел из тз Цикл 
		Если стрОтдел.ЭтоГруппа Тогда 
			Запрос.УстановитьПараметр("ГруппаТоваров",стрОтдел.Номенклатура);	
			Запрос.УстановитьПараметр("ИсключенияНоменклатуры",ИсключенияНоменклатуры);	
			Выборка = Запрос.Выполнить().Выбрать() ;
			
			Пока Выборка.Следующий() Цикл 
				ИсключенияНоменклатуры.Добавить(Выборка.Номенклатура);								
				
				СтрНоменклатураОтдел = 	 НоменклатураОтдел.Добавить() ;
				СтрНоменклатураОтдел.Номенклатура = Выборка.Номенклатура ;
				СтрНоменклатураОтдел.Отдел = стрОтдел.Отдел;
				
			КонецЦикла ;
			
		Иначе
			ИсключенияНоменклатуры.Добавить(стрОтдел.Номенклатура);								
			
			СтрНоменклатураОтдел = 	 НоменклатураОтдел.Добавить() ;
			СтрНоменклатураОтдел.Номенклатура = Выборка.Номенклатура ;
			СтрНоменклатураОтдел.Отдел = стрОтдел.Отдел;
				
		КонецЕсли ;	
	КонецЦикла ;	
					   
	Возврат НоменклатураОтдел;
	
КонецФункции 	
///////////////////////////////////////////////////
// Анализ времени 
Функция СкидкаПроходитПоВремени(ТекущееВремя,строкаСкидки)  
	
	НачалоДня = '00010101' ;
	КонецДня = '00010101' +86399 ;
	
	Результат = (строкаСкидки.ВремяНачала = НачалоДня) ИЛИ (строкаСкидки.ВремяОкончания = НачалоДня) ; 
	
	Если Не Результат Тогда 
		
		Если строкаСкидки.НочнойРежим Тогда 
			Результат = ((ТекущееВремя >= строкаСкидки.ВремяНачала )	И 
			(ТекущееВремя <=  КонецДня ) ) ИЛИ 
			( (ТекущееВремя >= НачалоДня )	И 
			(ТекущееВремя <=  строкаСкидки.ВремяОкончания  ) ) ;
			
		Иначе
			Результат = (ТекущееВремя >= строкаСкидки.ВремяНачала ) И 
			(ТекущееВремя <=  строкаСкидки.ВремяОкончания )  ;
		КонецЕсли ;	
		
	КонецЕсли ;	
	
	Возврат Результат ; 
	
КонецФУнкции 

Процедура ДобавитьСкидкиНаценкиВТаблицу(ТаблицаСкидок,ДеньНедели)		
	
	ТекущееВремя ='00010101' + (ТекущаяДата() - НачалоДня(ТекущаяДата())) ; 
	
	строки = СкидкиНаценки.НайтиСтроки(Новый Структура("ДеньНедели",ДеньНедели));	
	Если Строки.Количество() >0 Тогда 
		Запрос = Новый Запрос ;
		Запрос.Текст = "ВЫБРАТЬ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В ИЕРАРХИИ(&Группа)
		|АВТОУПОРЯДОЧИВАНИЕ"; 
		Для каждого стр из строки Цикл 
			Если Не СкидкаПроходитПоВремени(ТекущееВремя,стр) Тогда 
				Продолжить ;	
			КонецЕсли ;
			
			Если стр.Номенклатура.ЭтоГруппа Тогда 
				Запрос.УстановитьПараметр("Группа",стр.Номенклатура);
				Выборка = Запрос.Выполнить().Выбрать();
				Пока выборка.Следующий() Цикл 
					Если ТаблицаСкидок.Найти(Выборка.Ссылка,"Номенклатура") = Неопределено Тогда  
						стр1 = ТаблицаСкидок.Добавить();
						стр1.Номенклатура = Выборка.Ссылка ;
						стр1.ПроцентСкидкиНаценки = стр.ПроцентСкидки ;
					КонецЕсли ;	
				КонецЦикла ;	
			Иначе
				стр1 = ТаблицаСкидок.Добавить();
				стр1.Номенклатура = стр.Номенклатура ;
				стр1.ПроцентСкидкиНаценки = стр.ПроцентСкидки ;
			КонецЕсли ;	
			
		КонецЦикла ;	
	КонецЕсли ;					
КонецПроцедуры

Функция ТаблицаПересчетаЦенНаТекущийДень()
	ответ = Новый ТаблицаЗначений ;
	Ответ.Колонки.Добавить("Номенклатура"); 	
	Ответ.Колонки.Добавить("ПроцентСкидкиНаценки"); 
	
	Если ЕстьСкидкиПоДнямНедели Тогда 
		Врем =  СкидкиНаценки.Выгрузить();
		Врем.Колонки.Добавить("Уровень");
		
		Для Каждого стр из Врем Цикл 
			стр.Уровень = стр.Номенклатура.Уровень();
		КонецЦикла ;	
		Врем.Сортировать("Уровень Убыв");		
		
		//Текущий День 
		ДобавитьСкидкиНаценкиВТаблицу(Ответ,ДеньНедели(ТекущаяДата()));
		//Безусловная Скидка ТекущийДень  = 0  
		ДобавитьСкидкиНаценкиВТаблицу(Ответ,0);
	КонецЕсли ;
	
	Возврат Ответ ;
	
КонецФункции	

Функция ОграниченияСкидок()
	ответ = Новый ТаблицаЗначений ;
	Ответ.Колонки.Добавить("Номенклатура"); 	
	Ответ.Колонки.Добавить("МаксСкидкаПроцент"); 
	Ответ.Колонки.Добавить("МаксБонусПроцент"); 
	
	Если ОграниченияСкидок.Количество() >0 Тогда 
		Врем =  ОграниченияСкидок.Выгрузить();
		Врем.Колонки.Добавить("Уровень");
		
		Для Каждого стр из Врем Цикл 
			стр.Уровень = стр.Номенклатура.Уровень();
		КонецЦикла ;	
		Врем.Сортировать("Уровень Убыв");		
		
		Запрос = Новый Запрос ;
		Запрос.Текст = "ВЫБРАТЬ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В ИЕРАРХИИ(&Группа)
		|АВТОУПОРЯДОЧИВАНИЕ"; 
		Для каждого стр из ОграниченияСкидок Цикл 
			
			Если стр.Номенклатура.ЭтоГруппа Тогда 
				Запрос.УстановитьПараметр("Группа",стр.Номенклатура);
				Выборка = Запрос.Выполнить().Выбрать();
				Пока выборка.Следующий() Цикл 
					Если Ответ.Найти(Выборка.Ссылка,"Номенклатура") = Неопределено Тогда  
						стр1 = Ответ.Добавить();
						стр1.Номенклатура = Выборка.Ссылка ;
						стр1.МаксСкидкаПроцент = стр.МаксСкидкаПроцент ;
						стр1.МаксБонусПроцент = стр.МаксБонусПроцент ;
					КонецЕсли ;	
				КонецЦикла ;	
			Иначе
				стр1 = Ответ.Добавить();
				стр1.Номенклатура = стр.Номенклатура ;
				стр1.МаксСкидкаПроцент = стр.МаксСкидкаПроцент ;
				стр1.МаксБонусПроцент = стр.МаксБонусПроцент ;
			КонецЕсли ;	
			
		КонецЦикла ;	
		
	КонецЕсли ;
	Возврат Ответ ;
	
КонецФункции	

Функция ПроданоОперативно(ПродажиПоОперативнымОтчетам,Номенклатура)
	
	Продано = 0 ;
	
	Если Не флЧистТовары  Тогда
		Если ОбработкаОперативныхОтчетов Тогда
			Если  ПродажиПоОперативнымОтчетам.количество()>0 Тогда 
				стр = ПродажиПоОперативнымОтчетам.Найти(Номенклатура,"Номенклатура");
				
				Если Не стр = Неопределено Тогда 
					Продано = -стр.Количество ;				
				КонецЕсли ;
				
			КонецЕсли ;
			
		КонецЕсли ;
	КонецЕсли ;
	Возврат Продано; 	
КонецФункции 

Функция ТаблицаОтделыККМ()
	рез = Новый ТаблицаЗначений;		
	рез.Колонки.Добавить("Номенклатура");
	рез.Колонки.Добавить("Отдел");
	
	Если УстановкаОтделаПоТоварам = 2 Тогда 
		рез = ОтделыККМ (); 	
	КонецЕсли ;	
	
	Возврат рез ;
КонецФункции 	

Функция ТаблицаОстатков()
	СхемаКомпоновкиДанных = ПолучитьМакет("ТаблицаОстатков");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
//	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных ;
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
//	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Склад",Данные.Склад) ;
	
	КомпоновщикНастроек.Настройки.Отбор.Элементы[0].Использование = ВыгрузкаПоОстаткам ;
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,);
	ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);	
	
	Возврат ТаблицаЗначений ;
	
КонецФункции 	

Функция ТаблицаТовары(Данные)
	
	ВнешниеНаборыДанных = Новый Структура ;
	ВнешниеНаборыДанных.Вставить("ОтделыПоТовару",ТаблицаОтделыККМ());
	ВнешниеНаборыДанных.Вставить("ТаблицаОстатков",ТаблицаОстатков());
	ВнешниеНаборыДанных.Вставить("ОграниченияСкидок",ОграниченияСкидок());
	
	
	СхемаКомпоновкиДанных = ПолучитьМакет("ТаблициТоваров");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
//	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных ;
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТипЦен",Данные.ТипЦен) ;
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("МаксПроцентСкидкиПоТоварам",МаксПроцентСкидкиПоТоварам) ;
	
	//	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Склад",Данные.Склад) ;
	
	КомпоновщикНастроек.Настройки.Отбор.Элементы[0].Использование = ВыгрузкаПоОстаткам ;
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,ВнешниеНаборыДанных);
	ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);	
	
	Если ТаблицаЗначений.Колонки.Найти("АлкВидКод")=Неопределено Тогда 
		ТаблицаЗначений.Колонки.Добавить("АлкВидКод") ;
		ТаблицаЗначений.ЗаполнитьЗначения("","АлкВидКод");
	КонецЕсли ;
	
	Возврат ТаблицаЗначений ;
	
КонецФункции

Функция ДанныеДляККМ(Данные) 
	
	Перем РезультатЗапроса	;
	Каталог   = КаталогВыгрузки();
	
	Если ВыгружатьТоварыИЦены Тогда 
		
		База      = ДБФ_Товары(Каталог);
		Коды      = ДБФ_ШК(Каталог);
		Группы    = ДБФ_Группы(КАталог);
		
		Если ОбработкаОперативныхОтчетов Тогда
			ПродажиПоОперативнымОтчетам = ПродажиПоОперативнымОтчетам(Данные.Склад) ;
		КонецЕсли ;		
		
		Результат	= ЗапросТовары(Данные,РезультатЗапроса);
		
		ТаблицаТовары = ТаблицаТовары(Данные);
		
		ТаблГрупп = неопределено; 
		
		ТаблицаПересчетаЦен = ТаблицаПересчетаЦенНаТекущийДень();
		ЕстьПересчетЦен = (ТаблицаПересчетаЦен.Количество()<>0);
		
		ОтделыПоТовару = ТаблицаОтделыККМ();
		ТаблицаОстатков = ТаблицаОстатков();
		
		ТаблОграниченияСкидок  = ОграниченияСкидок() ;
		НашлисьОграниченияСкидок = (ТаблОграниченияСкидок.Количество()<>0);
		
		Для каждого стрТовар из ТаблицаТовары  Цикл 
			
			Если ТоварыПоСвободнымЦенам.Найти(стрТовар.Номенклатура,"Номенклатура") <> Неопределено Тогда 
					ЦенаПродажи = 0  ;
			Иначе
				ЦенаПродажи = стрТовар.Цена  ;
				Если ЦенаПродажи = 0 Тогда
					Продолжить ;		
				КонецЕсли ;	
			КонецЕсли ;	
				
				Если ЕстьПересчетЦен Тогда 
					стр = ТаблицаПересчетаЦен.Найти(стрТовар.Номенклатура,"Номенклатура");
					Если стр <> Неопределено Тогда
						Если стр.ПроцентСкидкиНаценки < 0 Тогда 
							ЦенаПродажи = стрТовар.Цена * (1-стр.ПроцентСкидкиНаценки/100) ;
						Иначе	
							СкидкаМин = стр.ПроцентСкидкиНаценки ;
						КонецЕсли ;	
						
					КонецЕсли ;	
					
				КонецЕсли ;	
				
				База.Добавить();
				База.code		= стрТовар.Код;
				База.ARTIKUL	= стрТовар.Артикул;
				База.NAME		= стрТовар.Наименование;
				База.SHORTNAME	= стрТовар.Наименование;
				База.PRICE		= ЦенаПродажи;
				База.ED			= стрТовар.НаименованиеЕдиницы;
				База.SECTION	= стрТовар.Отдел;
				База.GROUP 		= КодГруппы(стрТовар.Родитель,ТаблГрупп);
				
				База.KOL 		= стрТовар.Количество + ПроданоОперативно(ПродажиПоОперативнымОтчетам,стрТовар.Номенклатура) ;
				База.CONTROL	= стрТовар.ОпцияВесовой;
				// Поиск отдела 
				СтрОтдел = ОтделыПоТовару.Найти(стрТовар.Номенклатура,"Номенклатура") ;
				
				Если СтрОтдел <> Неопределено Тогда
					База.Section = СтрОтдел.Отдел ;
					Если СтрОтдел.Отдел = 2 Тогда 
						База.CONTROL	= 256;
					КонецЕсли ;
				Иначе
					База.Section = стрТовар.Отдел ;
				КонецЕсли ;
				// Поиск Количество 
				СтрКоличество =ТаблицаОстатков.Найти(стрТовар.Номенклатура,"Номенклатура") ;
				Если СтрКоличество <> Неопределено Тогда
					База.KOL = СтрКоличество.КоличествоОстаток ;
				КонецЕсли ;
				
				
			
			    База.BONUSMAX	= МаксПроцентНачисленияБонуса ;
				База.SKIDMAX	= МаксПроцентСкидкиПоТоварам   ;
				База.SKIDMIN	= 0 ;
				База.BONUSMIN	= 0 ;
				Если НашлисьОграниченияСкидок Тогда 
					// Поиск Ограчений по скидкам 
					СтрОграничение =ТаблОграниченияСкидок.Найти(стрТовар.Номенклатура,"Номенклатура") ;
					
					Если СтрОграничение <> Неопределено Тогда
						База.SKIDMAX	= СтрОграничение.МаксБонусПроцент ;
						База.BONUSMAX	= СтрОграничение.МаксСкидкаПроцент ;
					КонецЕсли ;
				КонецЕсли ;
				База.AlcType	= стрТовар.АлкВидКод ;
				База.Записать();
		КонецЦикла;
		
		База.ЗакрытьФайл();
		
		//Отбор =  Новый структура ("ЕстьЭлементы",Истина) ;
		//Строки =  ТаблГрупп.НайтиСтроки(Отбор); 
		Если ТаблГрупп <> Неопределено Тогда 
			кс = ТаблГрупп.Количество();
			
			Для н = 1 по кс-1 Цикл 
				
				Группы.Добавить();
				Группы.NUM  = ТаблГрупп[н].КодГр;
				Группы.NAME = ТаблГрупп[н].Группа.Наименование;
				Группы.TYPE = 1;
				Группы.SKIDMIN = 0;
				Группы.SKIDMAX = 100;
				Группы.Записать();
			КонецЦикла ;
		КонецЕСли ;	
		Группы.ЗакрытьФайл();
		
		Выборка = ВыборкаШтрихКоды();
		
		Пока Выборка.Следующий() Цикл 
			Если НЕ ПустаяСтрока(Выборка.ШтрихКод) Тогда 
				Коды.Добавить();
				Коды.DOPCODE	= Выборка.ШтрихКод;
				Коды.MAINCODE	= Выборка.Код;
				Коды.KOEF		= Выборка.Коэффициент;
				Коды.NUMPRICE	= Выборка.НомерПрайса;
				Коды.Записать();
			КонецЕсли ;	
		КонецЦикла ;
		
		Выборка = ВыборкаАкцииШтрихКоды();
		
		Пока Выборка.Следующий() Цикл 
			Коды.Добавить();
			Коды.DOPCODE	= Выборка.Номенклатура.Код+":;";
			Коды.MAINCODE	= Выборка.Номенклатура.Код;
			Коды.KOEF		= 1;
			Коды.NUMPRICE	= АкционныйПрайс;
			Коды.Записать();
		КонецЦикла ;
		
		
		Коды.ЗакрытьФайл();
		
	КонецЕсли ;
	ДатаВремя= Формат(ТекущаяДата(),"ДФ=""ддММгггг_ЧЧммсс""");
	Если Данные.ВыгрКодСклада Тогда 
		КодСклада = Строка(Число(Данные.Склад.Код));
		ПолнИмяФайла = Каталог + "DOC_" + КодСклада + "_" + ДатаВремя+".ZIP";
	Иначе
		ПолнИмяФайла = Каталог + "DOC_"  + ДатаВремя+".ZIP";
	КонецЕсли ;
	
	
	Архив = Новый  ЗаписьZipФайла(ПолнИмяФайла);
	
	Если ВыгружатьТоварыИЦены Тогда 
		
		Архив.Добавить(Каталог + "Products.dbf");
		Архив.Добавить(Каталог + "DopCodes.dbf");
		Архив.Добавить(Каталог + "Names.dbf");
		
	КонецЕсли ;
	
	Если флКлиенты Тогда 
		//  Дисконтные карты 
		КартыКлиентов(Каталог);
		Архив.Добавить(Каталог + "Clients.dbf");
	КонецЕсли ;
	
	Если флПродавцы Тогда 
		//  Продавцы
		ИнформацияПоПРодавцам(Каталог);
		Архив.Добавить(Каталог + "DopIVals.dbf");
	КонецЕсли ;
	
	
	// Формирование дополнительных цен
	Если СформироватьДопЦены(Каталог) Тогда 
		Архив.Добавить(Каталог + "DopPrice.dbf");
	КонецЕсли;	
	
	Если флКассиры Тогда 
		ИмяФайлаКассиры = Каталог + "Kassirs.dbf" ;
		Если ВыгрузитьКассиров(Каталог) Тогда 
			Архив.Добавить(ИмяФайлаКассиры);
		КонецЕсли ;
	КонецЕсли;	
	
	Если ДанныеПоАкциям(Каталог) Тогда 
		Архив.Добавить(Каталог + "Act.dbf");
		Архив.Добавить(Каталог + "Act_cond.dbf");
		Архив.Добавить(Каталог + "Act_oper.dbf");
		
	КонецЕсли;	
	
	
	ФормированиеФайлаФлагов();
	
	Архив.Добавить(Каталог + "Zimp.zfl");
	Если ИнформацияДляВесовШтрих Тогда 
		ВыгрузитьВесовойТовар(Данные.ТипЦен,Каталог + "plu_shtrih.txt");
		Архив.Добавить(Каталог + "plu_shtrih.txt");
	КонецЕсли; 
	Архив.Записать();
	
	УдалитьФайлы(Каталог + "Products.dbf");
	УдалитьФайлы(Каталог + "DopCodes.dbf");
	УдалитьФайлы(Каталог + "DopPrice.dbf");
	УдалитьФайлы(Каталог + "Zimp.zfl");
	УдалитьФайлы(Каталог + "Clients.dbf");
	УдалитьФайлы(Каталог + "Names.dbf");
	
	Возврат  ПолнИмяФайла;
КонецФункции

Функция ДбфОписаниеАкций(Каталог) ;
	ПолнИмяФайла = Каталог + "\Act.dbf";
	База = Новый XBase();
	п = База.поля;
	п.Добавить("ACTCODE","N",6,0);  // номер акции 
	п.Добавить("NAME","C",60,0);  // имя пкарты 
	п.Добавить("BLOCK","L",0,0);  // блокирован 
	п.Добавить("DateB","D",10,0);  // Дата начала 
	п.Добавить("DateE","D",10,0);  // Дата конца
	п.Добавить("Days","N",6);  // Дни недели 0 = воскр, 6 понед	
	п.Добавить("TIMEB","C",10,0);    // вреия нвч "0000"
	п.Добавить("TIMEE","C",10,0);    // вреия кон "2359"
	п.Добавить("MULTIPLY","L",1,0);    // Кратнсоть 
	База.СоздатьФайл(ПолнИмяФайла);
	База.Кодировка = КодировкаXBase.OEM;
	Возврат База;
КонецФункции

Функция ДбфУсловияАкций(Каталог) ;
	
	ПолнИмяФайла = Каталог + "\Act_cond.dbf";
	База = Новый XBase();
	
	п = База.поля;
	п.Добавить("CONDCODE","N",6,0);  // номер условия 
	п.Добавить("ACTCODE","N",6,0);  // номер акции 
	п.Добавить("TYPEOBJ","N",3,0);  // Тип объекта
	п.Добавить("OBJECTNAME","C",60,0);  // Наим объекта
	
	//0 – чек;
	//1 – группа;
	//2 – товар.
	
	п.Добавить("OBJECT","C",16,0);  // Код объекта
	п.Добавить("KOL","N",6);  // Количество, от которого действует условие	
	п.Добавить("SUMD","N",6);  // Сумма, от которой  действует условие	
	База.СоздатьФайл(ПолнИмяФайла);
	База.Кодировка = КодировкаXBase.OEM;
	Возврат База;
	
КонецФункции

Функция ДбфОперацииАкций(Каталог) ;
	
	ПолнИмяФайла = Каталог + "\Act_oper.dbf";
	База = Новый XBase();
	п = База.поля;
	п.Добавить("ACTCODE","N",6,0);  // номер акции 
	п.Добавить("OPERCODE","N",6,0);  // номер операции  
	п.Добавить("TYPEOBJ","N",3,0);  // Тип объекта
	
	//0 – чек;
	//1 – группа;
	//2 – товар.
	п.Добавить("OBJECT","C",16,0);  // Код объекта
	п.Добавить("OBJECTNAME","C",60,0);  // Наим объекта
	п.Добавить("TYPEOPER","N",6);  // Тип операции.
	//1 – установить цену OPERN;
	//2 – установить номер прайса OPERN; 
	//10 – заместить % скидку на OPERN;
	//11 – увеличить % скидку на OPERN;
	//12 – выбрать максимальную % скидку из текущей и OPERN;
	//20 – сделать суммовую скидку;
	//98 – добавить товар OBJECT количеством OPERN(TYPEOBJ=2);
	//99 – удалить из чека(TYPEOBJ=1..2).
	п.Добавить("OPERN","N",19,4);  // Тип операции.
	//Числовой параметр операции.	
	п.Добавить("OPERI","N",6,0);  // 
	//Числовой параметр операции.	
	// Для Товара - номер прайса 
	База.СоздатьФайл(ПолнИмяФайла);
	База.Кодировка = КодировкаXBase.OEM;
	Возврат База;
	
КонецФункции

Функция ПроцентнаяСкидкаПоКоличеству()
	Запрос = Новый Запрос ;
	Запрос.УстановитьПараметр("Условие",Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара) ; 
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СкидкиНаценкиНоменклатурыСрезПоследних.Номенклатура,
	               |	СкидкиНаценкиНоменклатурыСрезПоследних.ЗначениеУсловия КАК Количество,
	               |	СкидкиНаценкиНоменклатурыСрезПоследних.ПроцентСкидкиНаценки,
	               |	СкидкиНаценкиНоменклатурыСрезПоследних.ДатаОкончания,
	               |	СкидкиНаценкиНоменклатурыСрезПоследних.Номенклатура.Код КАК код,
	               |	СкидкиНаценкиНоменклатурыСрезПоследних.Номенклатура.Наименование КАК Наименование
	               |ИЗ
	               |	РегистрСведений.СкидкиНаценкиНоменклатуры.СрезПоследних КАК СкидкиНаценкиНоменклатурыСрезПоследних
	               |ГДЕ
	               |	СкидкиНаценкиНоменклатурыСрезПоследних.Условие = &Условие";
	Возврат  Запрос.Выполнить().Выгрузить() ; 				
КонецФункции	

Функция ДанныеПоАкциям(Каталог)
	ФайлОписаниеАкции = ДбфОписаниеАкций(Каталог);
	ФайлУсловияАкции  = ДбфУсловияАкций(Каталог) ;
	ФайлОперацииАкции = ДбфОперацииАкций(Каталог);
	
	НомерОперации = 0 ;
	
	Если УсловияАкций.Количество() >0 Тогда  
		Запрос = Новый Запрос ;
		
		Запрос.УстановитьПараметр("УсловияАкций",УсловияАкций.Выгрузить());
		
		Запрос.Текст = "ВЫБРАТЬ
		|	УсловияАкций.Блокирована,
		|	УсловияАкций.Номенклатура,
		|	УсловияАкций.КоличествоНач,
		|	УсловияАкций.Кратность,
		|	УсловияАкций.КоличествоДобав
		|ПОМЕСТИТЬ ВремУсловияАкций
		|ИЗ
		|	&УсловияАкций КАК УсловияАкций
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВремУсловияАкций.Блокирована,
		|	ВремУсловияАкций.Номенклатура,
		|	ВремУсловияАкций.КоличествоНач,
		|	ВремУсловияАкций.Кратность,
		|	ВремУсловияАкций.КоличествоДобав
		|ИЗ
		|	ВремУсловияАкций КАК ВремУсловияАкций";	
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			НомерОперации = НомерОперации + 1 ;
			
			ФайлОписаниеАкции.Добавить();
			ФайлОписаниеАкции.ACTCODE = НомерОперации;  // номер акции 
			ФайлОписаниеАкции.NAME = "Акция "+ Строка(НомерОперации);    // имя 
			ФайлОписаниеАкции.BLOCK = Выборка.Блокирована;  // блокирован 
			ФайлОписаниеАкции.DateB  ='20150101';  // Дата начала 
			ФайлОписаниеАкции.DateE = '20250101';  // Дата конца
			ФайлОписаниеАкции.Days  = 255;         // Дни недели 0 = воскр, 6 понед	
			ФайлОписаниеАкции.TIMEB = "00:00:00"; //вреия нвч "0000"
			ФайлОписаниеАкции.TIMEE = "23:59:59";    // вреия кон "2359"
			ФайлОписаниеАкции.MULTIPLY = Выборка.Кратность;    // вреия кон "2359"
			ФайлОписаниеАкции.Записать() ;
			
			//Условия 	
			ФайлУсловияАкции.Добавить();
			ФайлУсловияАкции.CONDCODE = НомерОперации;  // номер операции 
			ФайлУсловияАкции.ACTCODE = НомерОперации ;
			ФайлУсловияАкции.TYPEOBJ = 2;
			ФайлУсловияАкции.OBJECT = "00"+Выборка.Номенклатура.Код;
			ФайлУсловияАкции.OBJECTNAME = Выборка.Номенклатура.Наименование;
			ФайлУсловияАкции.KOL = Выборка.КоличествоНач;
			ФайлУсловияАкции.SUMD = 0;
			ФайлУсловияАкции.Записать() ;
			
			// Операции 
			ФайлОперацииАкции.Добавить();
			ФайлОперацииАкции.OPERCODE = НомерОперации;  // номер операции 
			ФайлОперацииАкции.ACTCODE = НомерОперации ;
			ФайлОперацииАкции.TYPEOBJ = 2;
			ФайлОперацииАкции.OBJECT = Выборка.Номенклатура.Код;
			ФайлОперацииАкции.OBJECTNAME = Выборка.Номенклатура.Наименование;
			ФайлОперацииАкции.TYPEOPER = 98;
			ФайлОперацииАкции.OPERN = Выборка.КоличествоДобав;
			ФайлОперацииАкции.OPERI = АкционныйПрайс;
			ФайлОперацииАкции.Записать() ;
		КонецЦикла ;
	КонецЕсли ;
	
// 2 Этап Добавляем Акции по списку количество в док превысило 
		СкидкиПоКоличеству =ПроцентнаяСкидкаПоКоличеству();
		
		Для каждого стрСкидка из СкидкиПоКоличеству Цикл 
			
			НомерОперации = НомерОперации + 1 ;
			
			ФайлОписаниеАкции.Добавить();
			ФайлОписаниеАкции.ACTCODE = НомерОперации;  // номер акции 
			ФайлОписаниеАкции.NAME = "Скидка по количеству";    // имя 
			ФайлОписаниеАкции.BLOCK = Ложь;  // блокирован 
			ФайлОписаниеАкции.DateB  ='00010101';  // Дата начала 
			ФайлОписаниеАкции.DateE = ?(стрСкидка.ДатаОкончания='00010101','20250101',стрСкидка.ДатаОкончания);  // Дата конца
			ФайлОписаниеАкции.Days  = 255;         // Дни недели 0 = воскр, 6 понед	
			ФайлОписаниеАкции.TIMEB = "00:00:00"; //вреия нвч "0000"
			ФайлОписаниеАкции.TIMEE = "23:59:59";    // вреия кон "2359"
			ФайлОписаниеАкции.MULTIPLY = Истина;    // вреия кон "2359"
			ФайлОписаниеАкции.Записать() ;
			
			//Условия 	
			ФайлУсловияАкции.Добавить();
			ФайлУсловияАкции.CONDCODE = НомерОперации;  // номер операции 
			ФайлУсловияАкции.ACTCODE = НомерОперации ;
			ФайлУсловияАкции.TYPEOBJ = 2;
			ФайлУсловияАкции.OBJECT = "00"+СтрСкидка.Код;
			ФайлУсловияАкции.OBJECTNAME = СтрСкидка.Наименование;
			ФайлУсловияАкции.KOL = СтрСкидка.Количество;
			ФайлУсловияАкции.SUMD = 0;
			ФайлУсловияАкции.Записать() ;
			
			// Операции 
			ФайлОперацииАкции.Добавить();
			ФайлОперацииАкции.OPERCODE = НомерОперации;  // номер операции 
			ФайлОперацииАкции.ACTCODE = НомерОперации ;
			ФайлОперацииАкции.TYPEOBJ = 2;
			ФайлОперацииАкции.OBJECT =  "00"+СтрСкидка.Код;
			ФайлОперацииАкции.OBJECTNAME =  СтрСкидка.Наименование;
			ФайлОперацииАкции.TYPEOPER = 12;
			ФайлОперацииАкции.OPERN = СтрСкидка.ПроцентСкидкиНаценки;
			ФайлОперацииАкции.OPERI = 0;
			ФайлОперацииАкции.Записать() ;
		КонецЦикла ;
		результат = ФайлОперацииАкции.КоличествоЗаписей()>0 ;
	
		ФайлОписаниеАкции.ЗакрытьФайл() ;
		ФайлУсловияАкции.ЗакрытьФайл() ;
		ФайлОперацииАкции.ЗакрытьФайл() ;
	
	Возврат  результат;
	
КонецФункции

// Подготовка файлов для передачи на точки
Функция ПодготовитьФайлы(Данные)
	Файлы = Новый Массив ;
	Файлы.Добавить(ДанныеДляККМ(Данные));
	Возврат Файлы; 
КонецФункции 
///////////////////////////////////////////
Процедура ОтправитьДаныеПоПочте(Файлы,Знач АдресПолучателя="")	
	Если АдресПолучателя = "" Тогда 
		АдресПолучателя = УчетнаяЗаписьПочты.АдресЭлектроннойПочты;
	КонецЕсли ;	
	
	Профиль = ПрофильПочты();
	
	
	Отправитель = "Office";
	// Проверяем возможность установки соединения без модема 
	СоединениеУстановлено = Ложь;
	Почта = Новый ИнтернетПочта;
	Если НЕ СоединениеУстановлено Тогда 
		Попытка 
			СоединениеУстановлено =УстановитьСоединениеИнтернет();
		Исключение 
			
		КонецПопытки;
	КонецЕсли;	
	Если СоединениеУстановлено Тогда 
		Попытка 	
			Почта.Подключиться(Профиль);
			СоединениеУстановлено=Истина;
		Исключение 
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	Если СоединениеУстановлено Тогда 
		Для Каждого ФайлВыгр из Файлы Цикл 
			Тема = ТемаСообщения(ФайлВыгр);
			ПередатьСообщениеПоПочте(Почта,АдресПолучателя,Отправитель,Тема,ФайлВыгр);
		КонецЦикла;	
		Почта.Отключиться();
		Если ИнтСоед <> Неопределено Тогда 
			ИнтСоед.Разорвать();
			ИнтСоед =  Неопределено;
		КонецЕсли;	
		Предупреждение ("Документы переданы по почте ",15);
	Иначе 
		Предупреждение("не удалось установить соединение ",15);
	КонецЕсли;	
	Для Каждого ФайлВыгр из Файлы Цикл 
		УдалитьФайлы(ФайлВыгр);
	КонецЦикла;	
	
КонецПроцедуры 
///////////////////////////////////////////
Процедура ПередачаДанных() Экспорт
	УдалитьФайлы(КаталогВременныхФайлов(),"doc_*.zip");
	тзОбмен = Обмен.Выгрузить();
	тзОбмен.Сортировать("Склад Возр");
	текСклад = Справочники.Склады.ПустаяСсылка() ;
	текНОменклатура = Справочники.Номенклатура.ПустаяСсылка() ;
	текОрг = Справочники.Организации.ПустаяСсылка() ;
	
	текСклад = Неопределено ;
	текНОменклатура = Неопределено ;
	текОрг = Неопределено ;
	
	
	Для каждого стр из тзОбмен Цикл 
		Если Не Стр.Выгрузка Тогда 
			Продолжить ;
		КонецЕсли ;	
		Готовим = Ложь;	
		Если (текОрг <> стр.Организация)ИЛИ(текСклад <> стр.Склад) ИЛИ текНОменклатура <> стр.Номенклатура Тогда 
			Готовим = Истина; ;	
		КонецЕсли ;	
		
		Если Готовим Тогда 
			Файлы = ПодготовитьФайлы(стр);
			текСклад = стр.Склад;
			текНоменклатура = стр.Номенклатура;
			текОрг = стр.Организация;
		КонецЕсли ;	
		
		
		
		Если стр.Почта Тогда 
			ОтправитьДаныеПоПочте(Файлы,стр.АдресПолучателя);
		Иначе
			для каждого файл из Файлы Цикл 
				КаталогЭкспорта = стр.Экспорт ;
				Если Прав(КаталогЭкспорта,1) <> "\" Тогда 
					КаталогЭкспорта = КаталогЭкспорта + "\";	
				КонецЕсли ;	
				
				Если НайтиФайлы(КаталогЭкспорта).Количество() = 0 Тогда 
					Предупреждение("Копирование на каcсу невозможно "+ Символы.ВК + Символы.ПС +
					"  Нет доступа к каталогу " + КаталогЭкспорта);
					Продолжить ;
				КонецЕсли ;	
				
				ФайлПриемник = СтрЗаменить(Файл,КаталогВременныхФайлов(),КаталогЭкспорта);
				КопироватьФайл(Файл,ФайлПриемник);
				
			КонецЦикла ;
		КонецЕсли ;	 
	КонецЦикла ;	
	УдалитьФайлы(КаталогВременныхФайлов(),"doc_*.zip");
КонецПроцедуры	
///////////////////////////////////////////
Процедура ПриемДанных() Экспорт 
	тзОбмен =Обмен.Выгрузить();
	
	Для каждого стр из тзОбмен Цикл 
		Если Не стр.Почта  Тогда 
			РозничныйСклад = НЕ(стр.склад.видсклада = Перечисления.ВидыСкладов.Оптовый); 
			Если Не ОбработкаОперативныхОтчетов Тогда 
				Сообщить("Прием из каталога "+ стр.Импорт);
			КонецЕсли ;
			ЗагрузитьДанныеТоргсервиса(стр,РозничныйСклад);
		КонецЕсли ;
	КонецЦикла ;
	Если тзОбмен.НайтиСтроки(
		Новый Структура("Почта",Истина)).Количество() >0 Тогда 
		Сообщить("Прием по почте");
		Если НайтиФайлы(СокрЛП(КаталогАрхиваПочты)).Количество()=0 Тогда 
			Предупреждение("Не найден путь к каталогу архива . Он должен обязательно существовать"+ Символ(10)+Символ(13) +
			"Прием по почте не выполнен "
			);
		Иначе 
			КаталогЗагрузки = КаталогВременныхФайлов(); 
			УдалитьФайлы(КаталогЗагрузки,"rep_*.zip");
			УдалитьФайлы(КаталогЗагрузки,"xrp_*.zip");
			УдалитьФайлы(КаталогЗагрузки,"prh*.txt");
			ПриемПочты(КаталогЗагрузки);
			НастройкаЗагрузки = Новый Структура(
			"Импорт,Архив,КаталогОперативныхОтчетов",
			КаталогЗагрузки,
			КаталогАрхиваПочты,
			""
			); 
			ЗагрузитьДанныеТоргсервиса(НастройкаЗагрузки,Ложь);
		КонецЕсли ;	
	КонецЕсли ;
	
	Сообщить("Обработка завершена!", СтатусСообщения.Информация);
	
КонецПроцедуры	
/////////
// Модуль весового товара 
//

Функция СтрокаИнфПоТовару(ПЛУ,Код,Наименование,Цена,СрокГодности)
	Разделитель = ";";
	ДатаСтР = Формат(ТекущаяДата(),"ДФ=dd.MM.yy");
	ПЛУСтр   = Формат(ПЛУ,"ЧЦ=5; ЧГ=0");
	КодТов = Формат(Число(Прав(Код,5)),"ЧЦ=5; ЧГ=0");
	
	Наим  = СокрЛП(Наименование);
	Наим  = СтрЗаменить(Наим,",",""); 
	Наим1 = Лев(Наим,28); 
	Наим2 = Сред(Наим,29,28); 
	
	ЦенаТовСтр = Формат(Цена,"ЧЦ=9; ЧДЦ=2; ЧРД=,; ЧГ=0");
	ПолеСрок = Строка(СрокГодности);
	Если ПолеСрок = "0"  Тогда
		ПолеСрок = "30";
	КонецЕсли;  
	
	//		ПолеСрок= ПолеСрок);
	рез = "";
	рез = рез + ПлуСтр+ Разделитель;  // ПЛУ
	рез = рез + Наим1+ Разделитель;  // наименвоание товара 1 строка  28 симв без запятых 
	рез = рез + Наим2+ Разделитель;  // наименвоание товара 2 строка  28 симв 
	рез = рез + ЦенаТовСтр+ Разделитель;  // цена  товара 
	рез = рез + ПолеСрок+ Разделитель;  // годен до   //дл =3 
	рез = рез + "0,000"+ Разделитель;  // тара кг
	рез = рез + "0"+ Разделитель;  // группа
	рез = рез + КодТов+ Разделитель;  // код товара дл = 13 
	рез = рез + "0"+ Разделитель;  // номер сообщения 
	рез = рез + "0"+ Разделитель;  // номер излюражения
	рез = рез + "0000"+ Разделитель;  // Рос тест
	рез = рез + ДатаСтР+ Разделитель;  // Дата реалихации
	рез = рез + "0"+ Разделитель;  // Весвой = 0 1;
	
	
	рез = рез + КодТов+ Разделитель;  // код товара дл = 13 
	рез = рез + КодТов+ Разделитель;  // код товара дл = 13 
	рез = рез + КодТов+ Разделитель;  // код товара дл = 13 
	
	Возврат рез ;
	
КонецФункции 

Процедура ВыгрузитьВесовойТовар(ТипЦен,ИмяФайла) Экспорт 
	Запрос =Новый Запрос ;
	Запрос.УстановитьПараметр("ТипЦен",ТипЦен);
	Запрос.УстановитьПараметр("СрокГодности","СрокГодностиДней");
	Запрос.Текст = "ВЫБРАТЬ
	|	СпрНоменклатура.Код,
	|	СпрНоменклатура.Наименование,
	|	СпрНоменклатура.НаименованиеПолное,
	|	ЦеныНоменклатурыСрезПоследних.Цена,
	|	ЕстьNull(СрокиГодности.СрокГодности,30)как СрокГодности
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
	|		ПО СпрНоменклатура.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЗначенияСвойствОбъектов.Объект КАК Номенклатура,
	|			ЗначенияСвойствОбъектов.Значение КАК СрокГодности
	|		ИЗ
	|			РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ГДЕ
	|			ЗначенияСвойствОбъектов.Свойство.Наименование = &СрокГодности) КАК СрокиГодности
	|		ПО СпрНоменклатура.Ссылка = СрокиГодности.Номенклатура
	|ГДЕ
	|	ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦен
	|	И СпрНоменклатура.Весовой";
	Выборка = Запрос.Выполнить().Выбрать();
	Если выборка.Количество() >0 Тогда 
		Текст = Новый ТекстовыйДокумент ;
		Плу = 0 ;
		Пока Выборка.Следующий() Цикл 
			Плу = Плу+1 ;
			Текст.ДобавитьСтроку(СтрокаИнфПоТовару(Плу,Выборка.Код,Выборка.Наименование,Выборка.Цена,Выборка.СрокГодности) );		
		КонецЦикла ;	
		
		Текст.Записать(ИмяФайла,КодировкаТекста.ANSI);
		
	Иначе
		Сообщить("Запрос по весовому товару не выполнен"); 
	КонецЕсли ;
	
КонецПроцедуры 	
// Технологическая для вывода инф некоторым типам пользователей

Функция КонтрольНастроек() Экспорт 
	// Настройка таблицы обмена 
	Если Обмен.Количество() = 0 Тогда 
		Сообщить("Не настроена таблица обмена , количество строк = 0");
	Иначе	
		Для каждого стр из Обмен Цикл 
			Если  стр.Импорт = стр.Архив Тогда 
				
			КонецЕсли ;	
		КонецЦикла 
	КонецЕсли ;	
	
КонецФункции 


Процедура ВыгрузитьКартинки() Экспорт
	
	Запрос = Новый Запрос ;
	Запрос.УстановитьПараметр("ПустаяСсылка",справочники.ХранилищеДополнительнойИнформации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВидИнформации",Перечисления.ВидыДополнительнойИнформацииОбъектов.Изображение);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.ОсновноеИзображение.Ссылка КАК Картинка,
	|	""00"" + Номенклатура.Код КАК КодТовара
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ОсновноеИзображение.ПометкаУдаления
	|	И Номенклатура.ОсновноеИзображение.Ссылка <> &ПустаяСсылка
	|	И Номенклатура.ОсновноеИзображение.ВидДанных = &ВидИнформации" ;
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Количество = Выборка.Количество() ;
	н = 0 ;
	Пока выборка.Следующий() Цикл
		н = н + 1 ;
		Процент = н*100/Количество ;
		ИмяФайла = ПутьВыгрузкиКартинок + "\" +Выборка.КодТовара + ".jpg";  		
		Файл = Новый Файл(Файл) ;
		Если не Файл.Существует() Тогда
			Содержание = Выборка.Картинка.Хранилище.Получить();
			Содержание.Записать(ИмяФайла);
		конецЕсли ;
		Состояние(Строка(процент)) ;				
	КонецЦикла ;	
	Предупреждение ("Фотографии выгружены успешно ", 5 );
КонецПроцедуры

